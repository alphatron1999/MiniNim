Grammar

    0 $accept: module $end

    1 module: complexOrSimpleStmt
    2       | complexOrSimpleStmt module2
    3       | %empty

    4 module2: INDEQ complexOrSimpleStmt module2
    5        | INDEQ complexOrSimpleStmt

    6 comma: ","

    7 colon: ":"

    8 sExpr: sExpr "xor" sExpr
    9      | sExpr "or" sExpr
   10      | sExpr "and" sExpr
   11      | sExpr "!=" sExpr
   12      | sExpr ">" sExpr
   13      | sExpr ">=" sExpr
   14      | sExpr "<" sExpr
   15      | sExpr "<=" sExpr
   16      | sExpr "==" sExpr
   17      | sExpr ".." sExpr
   18      | sExpr "-" sExpr
   19      | sExpr "+" sExpr
   20      | sExpr "%" sExpr
   21      | sExpr "mod" sExpr
   22      | sExpr "div" sExpr
   23      | sExpr "/" sExpr
   24      | sExpr "*" sExpr
   25      | "+" sExpr
   26      | "-" sExpr
   27      | "$" sExpr
   28      | "not" sExpr
   29      | '(' sExpr ')'
   30      | primary

   31 symbol: IDENT

   32 exprList: expr comma exprList
   33         | expr

   34 literal: BOOLLIT
   35        | INTLIT
   36        | FLOATLIT
   37        | STRLIT
   38        | CHARLIT
   39        | "nil"

   40 identOrLiteral: symbol
   41               | literal
   42               | arrayConstr
   43               | tupleConstr

   44 tupleConstr: "(" exprList ")"

   45 arrayConstr: "[" exprList "]"

   46 primarySuffix: "(" exprList ")"
   47              | "(" ")"
   48              | "[" expr "]"
   49              | "." symbol

   50 ifExpr: "if" condExpr

   51 condExpr: expr colon expr elifCondExpr

   52 elifCondExpr: "elif" expr colon expr elifCondExpr
   53             | "else" colon expr

   54 symbolCommaNoHang: symbolCommaNoHang comma symbol
   55                  | symbol comma symbol

   56 declColon: symbol ":" typeDescFunc

   57 inlTupleDecl: "tuple" "[" declColonCommaNoHang "]"

   58 arrayDecl: "array" "[" INTLIT comma typeDesc "]"

   59 paramList: "(" declColonCommaNoHang ")"
   60          | "(" ")"

   61 declColonCommaNoHang: declColon comma declColonCommaNoHang
   62                     | declColon

   63 paramListColon: paramList ":" typeDescFunc
   64               | ":" typeDesc
   65               | %empty

   66 typeDescFunc: typeDesc
   67             | "var" typeDesc

   68 forStmt: "for" symbolCommaNoHang "in" expr colonBody
   69        | "for" symbol "in" expr colonBody

   70 expr: ifExpr
   71     | sExpr

   72 primary: identOrLiteral primary2
   73        | identOrLiteral

   74 primary2: primarySuffix primary2
   75         | primarySuffix

   76 typeDesc: symbol
   77         | inlTupleDecl
   78         | arrayDecl

   79 exprStmt: sExpr
   80         | symbol "=" expr
   81         | symbol "+=" expr
   82         | symbol "*=" expr

   83 returnStmt: "return" expr
   84           | "return"

   85 breakStmt: "break"

   86 continueStmt: "continue"

   87 condStmt: expr colonBody elifCondStmt
   88         | expr colonBody elifCondStmt INDEQ "else" colonBody
   89         | expr colonBody
   90         | expr colonBody INDEQ "else" colonBody

   91 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody
   92             | INDEQ "elif" expr colonBody

   93 ifStmt: "if" condStmt

   94 whileStmt: "while" expr colonBody

   95 routine: symbol paramListColon "=" stmt
   96        | symbol paramListColon

   97 typeDef: symbol "=" typeDesc

   98 colonBody: colon stmt

   99 variable: declColon "=" expr
  100         | declColon

  101 secVariable: variable
  102            | INDG variable serVariable DED

  103 serVariable: INDEQ variable serVariable
  104            | %empty

  105 simpleStmt: returnStmt
  106           | breakStmt
  107           | continueStmt
  108           | exprStmt

  109 complexOrSimpleStmt: ifStmt
  110                    | whileStmt
  111                    | forStmt
  112                    | "proc" routine
  113                    | "type" typeDef
  114                    | "var" secVariable
  115                    | simpleStmt

  116 stmt: INDG complexOrSimpleStmt stmt2 DED
  117     | simpleStmt

  118 stmt2: INDEQ complexOrSimpleStmt stmt2
  119      | %empty


Terminals, with rules where they appear

$end (0) 0
'(' (40) 29
')' (41) 29
error (256)
INTLIT (258) 35 58
FLOATLIT (259) 36
STRLIT (260) 37
CHARLIT (261) 38
BOOLLIT (262) 34
IDENT (263) 31
INDG (264) 102 116
INDEQ (265) 4 5 88 90 91 92 103 118
DED (266) 102 116
IFX (267)
"xor" (268) 8
"or" (269) 9
"and" (270) 10
"!=" (271) 11
">" (272) 12
">=" (273) 13
"<" (274) 14
"<=" (275) 15
"==" (276) 16
".." (277) 17
"-" (278) 18 26
"+" (279) 19 25
"%" (280) 20
"mod" (281) 21
"div" (282) 22
"/" (283) 23
"*" (284) 24
"$" (285) 27
"not" (286) 28
UPLUS (287)
UMINUS (288)
LPAREN (289)
"," (290) 6
":" (291) 7 56 63 64
"nil" (292) 39
"(" (293) 44 46 47 59 60
")" (294) 44 46 47 59 60
"[" (295) 45 48 57 58
"]" (296) 45 48 57 58
"." (297) 49
"if" (298) 50 93
"elif" (299) 52 91 92
"else" (300) 53 88 90
"tuple" (301) 57
"array" (302) 58
"var" (303) 67 114
"for" (304) 68 69
"in" (305) 68 69
"=" (306) 80 95 97 99
"+=" (307) 81
"*=" (308) 82
"return" (309) 83 84
"break" (310) 85
"continue" (311) 86
"while" (312) 94
"proc" (313) 112
"type" (314) 113


Nonterminals, with rules where they appear

$accept (62)
    on left: 0
module (63)
    on left: 1 2 3, on right: 0
module2 (64)
    on left: 4 5, on right: 2 4
comma (65)
    on left: 6, on right: 32 54 55 58 61
colon (66)
    on left: 7, on right: 51 52 53 98
sExpr (67)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28 29 30, on right: 8 9 10 11 12 13 14 15 16 17 18 19 20 21
    22 23 24 25 26 27 28 29 71 79
symbol (68)
    on left: 31, on right: 40 49 54 55 56 69 76 80 81 82 95 96 97
exprList (69)
    on left: 32 33, on right: 32 44 45 46
literal (70)
    on left: 34 35 36 37 38 39, on right: 41
identOrLiteral (71)
    on left: 40 41 42 43, on right: 72 73
tupleConstr (72)
    on left: 44, on right: 43
arrayConstr (73)
    on left: 45, on right: 42
primarySuffix (74)
    on left: 46 47 48 49, on right: 74 75
ifExpr (75)
    on left: 50, on right: 70
condExpr (76)
    on left: 51, on right: 50
elifCondExpr (77)
    on left: 52 53, on right: 51 52
symbolCommaNoHang (78)
    on left: 54 55, on right: 54 68
declColon (79)
    on left: 56, on right: 61 62 99 100
inlTupleDecl (80)
    on left: 57, on right: 77
arrayDecl (81)
    on left: 58, on right: 78
paramList (82)
    on left: 59 60, on right: 63
declColonCommaNoHang (83)
    on left: 61 62, on right: 57 59 61
paramListColon (84)
    on left: 63 64 65, on right: 95 96
typeDescFunc (85)
    on left: 66 67, on right: 56 63
forStmt (86)
    on left: 68 69, on right: 111
expr (87)
    on left: 70 71, on right: 32 33 48 51 52 53 68 69 80 81 82 83 87
    88 89 90 91 92 94 99
primary (88)
    on left: 72 73, on right: 30
primary2 (89)
    on left: 74 75, on right: 72 74
typeDesc (90)
    on left: 76 77 78, on right: 58 64 66 67 97
exprStmt (91)
    on left: 79 80 81 82, on right: 108
returnStmt (92)
    on left: 83 84, on right: 105
breakStmt (93)
    on left: 85, on right: 106
continueStmt (94)
    on left: 86, on right: 107
condStmt (95)
    on left: 87 88 89 90, on right: 93
elifCondStmt (96)
    on left: 91 92, on right: 87 88 91
ifStmt (97)
    on left: 93, on right: 109
whileStmt (98)
    on left: 94, on right: 110
routine (99)
    on left: 95 96, on right: 112
typeDef (100)
    on left: 97, on right: 113
colonBody (101)
    on left: 98, on right: 68 69 87 88 89 90 91 92 94
variable (102)
    on left: 99 100, on right: 101 102 103
secVariable (103)
    on left: 101 102, on right: 114
serVariable (104)
    on left: 103 104, on right: 102 103
simpleStmt (105)
    on left: 105 106 107 108, on right: 115 117
complexOrSimpleStmt (106)
    on left: 109 110 111 112 113 114 115, on right: 1 2 4 5 116 118
stmt (107)
    on left: 116 117, on right: 95 98
stmt2 (108)
    on left: 118 119, on right: 116 118


State 0

    0 $accept: . module $end

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    "-"         shift, and go to state 7
    "+"         shift, and go to state 8
    "$"         shift, and go to state 9
    "not"       shift, and go to state 10
    '('         shift, and go to state 11
    "nil"       shift, and go to state 12
    "("         shift, and go to state 13
    "["         shift, and go to state 14
    "if"        shift, and go to state 15
    "var"       shift, and go to state 16
    "for"       shift, and go to state 17
    "return"    shift, and go to state 18
    "break"     shift, and go to state 19
    "continue"  shift, and go to state 20
    "while"     shift, and go to state 21
    "proc"      shift, and go to state 22
    "type"      shift, and go to state 23

    $default  reduce using rule 3 (module)

    module               go to state 24
    sExpr                go to state 25
    symbol               go to state 26
    literal              go to state 27
    identOrLiteral       go to state 28
    tupleConstr          go to state 29
    arrayConstr          go to state 30
    forStmt              go to state 31
    primary              go to state 32
    exprStmt             go to state 33
    returnStmt           go to state 34
    breakStmt            go to state 35
    continueStmt         go to state 36
    ifStmt               go to state 37
    whileStmt            go to state 38
    simpleStmt           go to state 39
    complexOrSimpleStmt  go to state 40


State 1

   35 literal: INTLIT .

    $default  reduce using rule 35 (literal)


State 2

   36 literal: FLOATLIT .

    $default  reduce using rule 36 (literal)


State 3

   37 literal: STRLIT .

    $default  reduce using rule 37 (literal)


State 4

   38 literal: CHARLIT .

    $default  reduce using rule 38 (literal)


State 5

   34 literal: BOOLLIT .

    $default  reduce using rule 34 (literal)


State 6

   31 symbol: IDENT .

    $default  reduce using rule 31 (symbol)


State 7

   26 sExpr: "-" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 41
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 8

   25 sExpr: "+" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 43
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 9

   27 sExpr: "$" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 44
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 10

   28 sExpr: "not" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 45
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 11

   29 sExpr: '(' . sExpr ')'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 46
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 12

   39 literal: "nil" .

    $default  reduce using rule 39 (literal)


State 13

   44 tupleConstr: "(" . exprList ")"

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    exprList        go to state 49
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 51
    primary         go to state 32


State 14

   45 arrayConstr: "[" . exprList "]"

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    exprList        go to state 52
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 51
    primary         go to state 32


State 15

   93 ifStmt: "if" . condStmt

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 53
    primary         go to state 32
    condStmt        go to state 54


State 16

  114 complexOrSimpleStmt: "var" . secVariable

    IDENT  shift, and go to state 6
    INDG   shift, and go to state 55

    symbol       go to state 56
    declColon    go to state 57
    variable     go to state 58
    secVariable  go to state 59


State 17

   68 forStmt: "for" . symbolCommaNoHang "in" expr colonBody
   69        | "for" . symbol "in" expr colonBody

    IDENT  shift, and go to state 6

    symbol             go to state 60
    symbolCommaNoHang  go to state 61


State 18

   83 returnStmt: "return" . expr
   84           | "return" .

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    $default  reduce using rule 84 (returnStmt)

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 62
    primary         go to state 32


State 19

   85 breakStmt: "break" .

    $default  reduce using rule 85 (breakStmt)


State 20

   86 continueStmt: "continue" .

    $default  reduce using rule 86 (continueStmt)


State 21

   94 whileStmt: "while" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 63
    primary         go to state 32


State 22

  112 complexOrSimpleStmt: "proc" . routine

    IDENT  shift, and go to state 6

    symbol   go to state 64
    routine  go to state 65


State 23

  113 complexOrSimpleStmt: "type" . typeDef

    IDENT  shift, and go to state 6

    symbol   go to state 66
    typeDef  go to state 67


State 24

    0 $accept: module . $end

    $end  shift, and go to state 68


State 25

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr
   79 exprStmt: sExpr .

    "xor"  shift, and go to state 69
    "or"   shift, and go to state 70
    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">"    shift, and go to state 73
    ">="   shift, and go to state 74
    "<"    shift, and go to state 75
    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 79 (exprStmt)


State 26

   40 identOrLiteral: symbol .
   80 exprStmt: symbol . "=" expr
   81         | symbol . "+=" expr
   82         | symbol . "*=" expr

    "="   shift, and go to state 86
    "+="  shift, and go to state 87
    "*="  shift, and go to state 88

    $default  reduce using rule 40 (identOrLiteral)


State 27

   41 identOrLiteral: literal .

    $default  reduce using rule 41 (identOrLiteral)


State 28

   72 primary: identOrLiteral . primary2
   73        | identOrLiteral .

    "("  shift, and go to state 89
    "["  shift, and go to state 90
    "."  shift, and go to state 91

    $default  reduce using rule 73 (primary)

    primarySuffix  go to state 92
    primary2       go to state 93


State 29

   43 identOrLiteral: tupleConstr .

    $default  reduce using rule 43 (identOrLiteral)


State 30

   42 identOrLiteral: arrayConstr .

    $default  reduce using rule 42 (identOrLiteral)


State 31

  111 complexOrSimpleStmt: forStmt .

    $default  reduce using rule 111 (complexOrSimpleStmt)


State 32

   30 sExpr: primary .

    $default  reduce using rule 30 (sExpr)


State 33

  108 simpleStmt: exprStmt .

    $default  reduce using rule 108 (simpleStmt)


State 34

  105 simpleStmt: returnStmt .

    $default  reduce using rule 105 (simpleStmt)


State 35

  106 simpleStmt: breakStmt .

    $default  reduce using rule 106 (simpleStmt)


State 36

  107 simpleStmt: continueStmt .

    $default  reduce using rule 107 (simpleStmt)


State 37

  109 complexOrSimpleStmt: ifStmt .

    $default  reduce using rule 109 (complexOrSimpleStmt)


State 38

  110 complexOrSimpleStmt: whileStmt .

    $default  reduce using rule 110 (complexOrSimpleStmt)


State 39

  115 complexOrSimpleStmt: simpleStmt .

    $default  reduce using rule 115 (complexOrSimpleStmt)


State 40

    1 module: complexOrSimpleStmt .
    2       | complexOrSimpleStmt . module2

    INDEQ  shift, and go to state 94

    $default  reduce using rule 1 (module)

    module2  go to state 95


State 41

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr
   26      | "-" sExpr .

    $default  reduce using rule 26 (sExpr)


State 42

   40 identOrLiteral: symbol .

    $default  reduce using rule 40 (identOrLiteral)


State 43

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr
   25      | "+" sExpr .

    $default  reduce using rule 25 (sExpr)


State 44

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr
   27      | "$" sExpr .

    $default  reduce using rule 27 (sExpr)


State 45

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr
   28      | "not" sExpr .

    $default  reduce using rule 28 (sExpr)


State 46

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr
   29      | '(' sExpr . ')'

    "xor"  shift, and go to state 69
    "or"   shift, and go to state 70
    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">"    shift, and go to state 73
    ">="   shift, and go to state 74
    "<"    shift, and go to state 75
    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85
    ')'    shift, and go to state 96


State 47

   50 ifExpr: "if" . condExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    condExpr        go to state 97
    expr            go to state 98
    primary         go to state 32


State 48

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr
   71 expr: sExpr .

    "xor"  shift, and go to state 69
    "or"   shift, and go to state 70
    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">"    shift, and go to state 73
    ">="   shift, and go to state 74
    "<"    shift, and go to state 75
    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 71 (expr)


State 49

   44 tupleConstr: "(" exprList . ")"

    ")"  shift, and go to state 99


State 50

   70 expr: ifExpr .

    $default  reduce using rule 70 (expr)


State 51

   32 exprList: expr . comma exprList
   33         | expr .

    ","  shift, and go to state 100

    $default  reduce using rule 33 (exprList)

    comma  go to state 101


State 52

   45 arrayConstr: "[" exprList . "]"

    "]"  shift, and go to state 102


State 53

   87 condStmt: expr . colonBody elifCondStmt
   88         | expr . colonBody elifCondStmt INDEQ "else" colonBody
   89         | expr . colonBody
   90         | expr . colonBody INDEQ "else" colonBody

    ":"  shift, and go to state 103

    colon      go to state 104
    colonBody  go to state 105


State 54

   93 ifStmt: "if" condStmt .

    $default  reduce using rule 93 (ifStmt)


State 55

  102 secVariable: INDG . variable serVariable DED

    IDENT  shift, and go to state 6

    symbol     go to state 56
    declColon  go to state 57
    variable   go to state 106


State 56

   56 declColon: symbol . ":" typeDescFunc

    ":"  shift, and go to state 107


State 57

   99 variable: declColon . "=" expr
  100         | declColon .

    "="  shift, and go to state 108

    $default  reduce using rule 100 (variable)


State 58

  101 secVariable: variable .

    $default  reduce using rule 101 (secVariable)


State 59

  114 complexOrSimpleStmt: "var" secVariable .

    $default  reduce using rule 114 (complexOrSimpleStmt)


State 60

   55 symbolCommaNoHang: symbol . comma symbol
   69 forStmt: "for" symbol . "in" expr colonBody

    ","   shift, and go to state 100
    "in"  shift, and go to state 109

    comma  go to state 110


State 61

   54 symbolCommaNoHang: symbolCommaNoHang . comma symbol
   68 forStmt: "for" symbolCommaNoHang . "in" expr colonBody

    ","   shift, and go to state 100
    "in"  shift, and go to state 111

    comma  go to state 112


State 62

   83 returnStmt: "return" expr .

    $default  reduce using rule 83 (returnStmt)


State 63

   94 whileStmt: "while" expr . colonBody

    ":"  shift, and go to state 103

    colon      go to state 104
    colonBody  go to state 113


State 64

   95 routine: symbol . paramListColon "=" stmt
   96        | symbol . paramListColon

    ":"  shift, and go to state 114
    "("  shift, and go to state 115

    $default  reduce using rule 65 (paramListColon)

    paramList       go to state 116
    paramListColon  go to state 117


State 65

  112 complexOrSimpleStmt: "proc" routine .

    $default  reduce using rule 112 (complexOrSimpleStmt)


State 66

   97 typeDef: symbol . "=" typeDesc

    "="  shift, and go to state 118


State 67

  113 complexOrSimpleStmt: "type" typeDef .

    $default  reduce using rule 113 (complexOrSimpleStmt)


State 68

    0 $accept: module $end .

    $default  accept


State 69

    8 sExpr: sExpr "xor" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 119
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 70

    9 sExpr: sExpr "or" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 120
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 71

   10 sExpr: sExpr "and" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 121
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 72

   11 sExpr: sExpr "!=" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 122
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 73

   12 sExpr: sExpr ">" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 123
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 74

   13 sExpr: sExpr ">=" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 124
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 75

   14 sExpr: sExpr "<" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 125
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 76

   15 sExpr: sExpr "<=" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 126
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 77

   16 sExpr: sExpr "==" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 127
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 78

   17 sExpr: sExpr ".." . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 128
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 79

   18 sExpr: sExpr "-" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 129
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 80

   19 sExpr: sExpr "+" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 130
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 81

   20 sExpr: sExpr "%" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 131
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 82

   21 sExpr: sExpr "mod" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 132
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 83

   22 sExpr: sExpr "div" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 133
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 84

   23 sExpr: sExpr "/" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 134
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 85

   24 sExpr: sExpr "*" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14

    sExpr           go to state 135
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 86

   80 exprStmt: symbol "=" . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 136
    primary         go to state 32


State 87

   81 exprStmt: symbol "+=" . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 137
    primary         go to state 32


State 88

   82 exprStmt: symbol "*=" . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 138
    primary         go to state 32


State 89

   46 primarySuffix: "(" . exprList ")"
   47              | "(" . ")"

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    ")"       shift, and go to state 139
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    exprList        go to state 140
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 51
    primary         go to state 32


State 90

   48 primarySuffix: "[" . expr "]"

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 141
    primary         go to state 32


State 91

   49 primarySuffix: "." . symbol

    IDENT  shift, and go to state 6

    symbol  go to state 142


State 92

   74 primary2: primarySuffix . primary2
   75         | primarySuffix .

    "("  shift, and go to state 89
    "["  shift, and go to state 90
    "."  shift, and go to state 91

    $default  reduce using rule 75 (primary2)

    primarySuffix  go to state 92
    primary2       go to state 143


State 93

   72 primary: identOrLiteral primary2 .

    $default  reduce using rule 72 (primary)


State 94

    4 module2: INDEQ . complexOrSimpleStmt module2
    5        | INDEQ . complexOrSimpleStmt

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    "-"         shift, and go to state 7
    "+"         shift, and go to state 8
    "$"         shift, and go to state 9
    "not"       shift, and go to state 10
    '('         shift, and go to state 11
    "nil"       shift, and go to state 12
    "("         shift, and go to state 13
    "["         shift, and go to state 14
    "if"        shift, and go to state 15
    "var"       shift, and go to state 16
    "for"       shift, and go to state 17
    "return"    shift, and go to state 18
    "break"     shift, and go to state 19
    "continue"  shift, and go to state 20
    "while"     shift, and go to state 21
    "proc"      shift, and go to state 22
    "type"      shift, and go to state 23

    sExpr                go to state 25
    symbol               go to state 26
    literal              go to state 27
    identOrLiteral       go to state 28
    tupleConstr          go to state 29
    arrayConstr          go to state 30
    forStmt              go to state 31
    primary              go to state 32
    exprStmt             go to state 33
    returnStmt           go to state 34
    breakStmt            go to state 35
    continueStmt         go to state 36
    ifStmt               go to state 37
    whileStmt            go to state 38
    simpleStmt           go to state 39
    complexOrSimpleStmt  go to state 144


State 95

    2 module: complexOrSimpleStmt module2 .

    $default  reduce using rule 2 (module)


State 96

   29 sExpr: '(' sExpr ')' .

    $default  reduce using rule 29 (sExpr)


State 97

   50 ifExpr: "if" condExpr .

    $default  reduce using rule 50 (ifExpr)


State 98

   51 condExpr: expr . colon expr elifCondExpr

    ":"  shift, and go to state 103

    colon  go to state 145


State 99

   44 tupleConstr: "(" exprList ")" .

    $default  reduce using rule 44 (tupleConstr)


State 100

    6 comma: "," .

    $default  reduce using rule 6 (comma)


State 101

   32 exprList: expr comma . exprList

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    exprList        go to state 146
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 51
    primary         go to state 32


State 102

   45 arrayConstr: "[" exprList "]" .

    $default  reduce using rule 45 (arrayConstr)


State 103

    7 colon: ":" .

    $default  reduce using rule 7 (colon)


State 104

   98 colonBody: colon . stmt

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    INDG        shift, and go to state 147
    "-"         shift, and go to state 7
    "+"         shift, and go to state 8
    "$"         shift, and go to state 9
    "not"       shift, and go to state 10
    '('         shift, and go to state 11
    "nil"       shift, and go to state 12
    "("         shift, and go to state 13
    "["         shift, and go to state 14
    "return"    shift, and go to state 18
    "break"     shift, and go to state 19
    "continue"  shift, and go to state 20

    sExpr           go to state 25
    symbol          go to state 26
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32
    exprStmt        go to state 33
    returnStmt      go to state 34
    breakStmt       go to state 35
    continueStmt    go to state 36
    simpleStmt      go to state 148
    stmt            go to state 149


State 105

   87 condStmt: expr colonBody . elifCondStmt
   88         | expr colonBody . elifCondStmt INDEQ "else" colonBody
   89         | expr colonBody .
   90         | expr colonBody . INDEQ "else" colonBody

    INDEQ  shift, and go to state 150

    $default  reduce using rule 89 (condStmt)

    elifCondStmt  go to state 151


State 106

  102 secVariable: INDG variable . serVariable DED

    INDEQ  shift, and go to state 152

    $default  reduce using rule 104 (serVariable)

    serVariable  go to state 153


State 107

   56 declColon: symbol ":" . typeDescFunc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 154
    "array"  shift, and go to state 155
    "var"    shift, and go to state 156

    symbol        go to state 157
    inlTupleDecl  go to state 158
    arrayDecl     go to state 159
    typeDescFunc  go to state 160
    typeDesc      go to state 161


State 108

   99 variable: declColon "=" . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 162
    primary         go to state 32


State 109

   69 forStmt: "for" symbol "in" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 163
    primary         go to state 32


State 110

   55 symbolCommaNoHang: symbol comma . symbol

    IDENT  shift, and go to state 6

    symbol  go to state 164


State 111

   68 forStmt: "for" symbolCommaNoHang "in" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 165
    primary         go to state 32


State 112

   54 symbolCommaNoHang: symbolCommaNoHang comma . symbol

    IDENT  shift, and go to state 6

    symbol  go to state 166


State 113

   94 whileStmt: "while" expr colonBody .

    $default  reduce using rule 94 (whileStmt)


State 114

   64 paramListColon: ":" . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 154
    "array"  shift, and go to state 155

    symbol        go to state 157
    inlTupleDecl  go to state 158
    arrayDecl     go to state 159
    typeDesc      go to state 167


State 115

   59 paramList: "(" . declColonCommaNoHang ")"
   60          | "(" . ")"

    IDENT  shift, and go to state 6
    ")"    shift, and go to state 168

    symbol                go to state 56
    declColon             go to state 169
    declColonCommaNoHang  go to state 170


State 116

   63 paramListColon: paramList . ":" typeDescFunc

    ":"  shift, and go to state 171


State 117

   95 routine: symbol paramListColon . "=" stmt
   96        | symbol paramListColon .

    "="  shift, and go to state 172

    $default  reduce using rule 96 (routine)


State 118

   97 typeDef: symbol "=" . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 154
    "array"  shift, and go to state 155

    symbol        go to state 157
    inlTupleDecl  go to state 158
    arrayDecl     go to state 159
    typeDesc      go to state 173


State 119

    8 sExpr: sExpr . "xor" sExpr
    8      | sExpr "xor" sExpr .
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "or"   shift, and go to state 70
    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">"    shift, and go to state 73
    ">="   shift, and go to state 74
    "<"    shift, and go to state 75
    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 8 (sExpr)


State 120

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
    9      | sExpr "or" sExpr .
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">"    shift, and go to state 73
    ">="   shift, and go to state 74
    "<"    shift, and go to state 75
    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 9 (sExpr)


State 121

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   10      | sExpr "and" sExpr .
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "!="   shift, and go to state 72
    ">"    shift, and go to state 73
    ">="   shift, and go to state 74
    "<"    shift, and go to state 75
    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 10 (sExpr)


State 122

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   11      | sExpr "!=" sExpr .
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    ">"    shift, and go to state 73
    ">="   shift, and go to state 74
    "<"    shift, and go to state 75
    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 11 (sExpr)


State 123

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   12      | sExpr ">" sExpr .
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    ">="   shift, and go to state 74
    "<"    shift, and go to state 75
    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 12 (sExpr)


State 124

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   13      | sExpr ">=" sExpr .
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "<"    shift, and go to state 75
    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 13 (sExpr)


State 125

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   14      | sExpr "<" sExpr .
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "<="   shift, and go to state 76
    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 14 (sExpr)


State 126

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   15      | sExpr "<=" sExpr .
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "=="   shift, and go to state 77
    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 15 (sExpr)


State 127

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   16      | sExpr "==" sExpr .
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    ".."   shift, and go to state 78
    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 16 (sExpr)


State 128

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   17      | sExpr ".." sExpr .
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "-"    shift, and go to state 79
    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 17 (sExpr)


State 129

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   18      | sExpr "-" sExpr .
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "+"    shift, and go to state 80
    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 18 (sExpr)


State 130

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   19      | sExpr "+" sExpr .
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "%"    shift, and go to state 81
    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 19 (sExpr)


State 131

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   20      | sExpr "%" sExpr .
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "mod"  shift, and go to state 82
    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 20 (sExpr)


State 132

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   21      | sExpr "mod" sExpr .
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "div"  shift, and go to state 83
    "/"    shift, and go to state 84
    "*"    shift, and go to state 85

    $default  reduce using rule 21 (sExpr)


State 133

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   22      | sExpr "div" sExpr .
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr

    "/"  shift, and go to state 84
    "*"  shift, and go to state 85

    $default  reduce using rule 22 (sExpr)


State 134

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   23      | sExpr "/" sExpr .
   24      | sExpr . "*" sExpr

    "*"  shift, and go to state 85

    $default  reduce using rule 23 (sExpr)


State 135

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . ">" sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . "<" sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . "-" sExpr
   19      | sExpr . "+" sExpr
   20      | sExpr . "%" sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . "/" sExpr
   24      | sExpr . "*" sExpr
   24      | sExpr "*" sExpr .

    $default  reduce using rule 24 (sExpr)


State 136

   80 exprStmt: symbol "=" expr .

    $default  reduce using rule 80 (exprStmt)


State 137

   81 exprStmt: symbol "+=" expr .

    $default  reduce using rule 81 (exprStmt)


State 138

   82 exprStmt: symbol "*=" expr .

    $default  reduce using rule 82 (exprStmt)


State 139

   47 primarySuffix: "(" ")" .

    $default  reduce using rule 47 (primarySuffix)


State 140

   46 primarySuffix: "(" exprList . ")"

    ")"  shift, and go to state 174


State 141

   48 primarySuffix: "[" expr . "]"

    "]"  shift, and go to state 175


State 142

   49 primarySuffix: "." symbol .

    $default  reduce using rule 49 (primarySuffix)


State 143

   74 primary2: primarySuffix primary2 .

    $default  reduce using rule 74 (primary2)


State 144

    4 module2: INDEQ complexOrSimpleStmt . module2
    5        | INDEQ complexOrSimpleStmt .

    INDEQ  shift, and go to state 94

    $default  reduce using rule 5 (module2)

    module2  go to state 176


State 145

   51 condExpr: expr colon . expr elifCondExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 177
    primary         go to state 32


State 146

   32 exprList: expr comma exprList .

    $default  reduce using rule 32 (exprList)


State 147

  116 stmt: INDG . complexOrSimpleStmt stmt2 DED

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    "-"         shift, and go to state 7
    "+"         shift, and go to state 8
    "$"         shift, and go to state 9
    "not"       shift, and go to state 10
    '('         shift, and go to state 11
    "nil"       shift, and go to state 12
    "("         shift, and go to state 13
    "["         shift, and go to state 14
    "if"        shift, and go to state 15
    "var"       shift, and go to state 16
    "for"       shift, and go to state 17
    "return"    shift, and go to state 18
    "break"     shift, and go to state 19
    "continue"  shift, and go to state 20
    "while"     shift, and go to state 21
    "proc"      shift, and go to state 22
    "type"      shift, and go to state 23

    sExpr                go to state 25
    symbol               go to state 26
    literal              go to state 27
    identOrLiteral       go to state 28
    tupleConstr          go to state 29
    arrayConstr          go to state 30
    forStmt              go to state 31
    primary              go to state 32
    exprStmt             go to state 33
    returnStmt           go to state 34
    breakStmt            go to state 35
    continueStmt         go to state 36
    ifStmt               go to state 37
    whileStmt            go to state 38
    simpleStmt           go to state 39
    complexOrSimpleStmt  go to state 178


State 148

  117 stmt: simpleStmt .

    $default  reduce using rule 117 (stmt)


State 149

   98 colonBody: colon stmt .

    $default  reduce using rule 98 (colonBody)


State 150

   90 condStmt: expr colonBody INDEQ . "else" colonBody
   92 elifCondStmt: INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 179
    "else"  shift, and go to state 180


State 151

   87 condStmt: expr colonBody elifCondStmt .
   88         | expr colonBody elifCondStmt . INDEQ "else" colonBody
   91 elifCondStmt: elifCondStmt . INDEQ "elif" expr colonBody

    INDEQ  shift, and go to state 181

    $default  reduce using rule 87 (condStmt)


State 152

  103 serVariable: INDEQ . variable serVariable

    IDENT  shift, and go to state 6

    symbol     go to state 56
    declColon  go to state 57
    variable   go to state 182


State 153

  102 secVariable: INDG variable serVariable . DED

    DED  shift, and go to state 183


State 154

   57 inlTupleDecl: "tuple" . "[" declColonCommaNoHang "]"

    "["  shift, and go to state 184


State 155

   58 arrayDecl: "array" . "[" INTLIT comma typeDesc "]"

    "["  shift, and go to state 185


State 156

   67 typeDescFunc: "var" . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 154
    "array"  shift, and go to state 155

    symbol        go to state 157
    inlTupleDecl  go to state 158
    arrayDecl     go to state 159
    typeDesc      go to state 186


State 157

   76 typeDesc: symbol .

    $default  reduce using rule 76 (typeDesc)


State 158

   77 typeDesc: inlTupleDecl .

    $default  reduce using rule 77 (typeDesc)


State 159

   78 typeDesc: arrayDecl .

    $default  reduce using rule 78 (typeDesc)


State 160

   56 declColon: symbol ":" typeDescFunc .

    $default  reduce using rule 56 (declColon)


State 161

   66 typeDescFunc: typeDesc .

    $default  reduce using rule 66 (typeDescFunc)


State 162

   99 variable: declColon "=" expr .

    $default  reduce using rule 99 (variable)


State 163

   69 forStmt: "for" symbol "in" expr . colonBody

    ":"  shift, and go to state 103

    colon      go to state 104
    colonBody  go to state 187


State 164

   55 symbolCommaNoHang: symbol comma symbol .

    $default  reduce using rule 55 (symbolCommaNoHang)


State 165

   68 forStmt: "for" symbolCommaNoHang "in" expr . colonBody

    ":"  shift, and go to state 103

    colon      go to state 104
    colonBody  go to state 188


State 166

   54 symbolCommaNoHang: symbolCommaNoHang comma symbol .

    $default  reduce using rule 54 (symbolCommaNoHang)


State 167

   64 paramListColon: ":" typeDesc .

    $default  reduce using rule 64 (paramListColon)


State 168

   60 paramList: "(" ")" .

    $default  reduce using rule 60 (paramList)


State 169

   61 declColonCommaNoHang: declColon . comma declColonCommaNoHang
   62                     | declColon .

    ","  shift, and go to state 100

    $default  reduce using rule 62 (declColonCommaNoHang)

    comma  go to state 189


State 170

   59 paramList: "(" declColonCommaNoHang . ")"

    ")"  shift, and go to state 190


State 171

   63 paramListColon: paramList ":" . typeDescFunc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 154
    "array"  shift, and go to state 155
    "var"    shift, and go to state 156

    symbol        go to state 157
    inlTupleDecl  go to state 158
    arrayDecl     go to state 159
    typeDescFunc  go to state 191
    typeDesc      go to state 161


State 172

   95 routine: symbol paramListColon "=" . stmt

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    INDG        shift, and go to state 147
    "-"         shift, and go to state 7
    "+"         shift, and go to state 8
    "$"         shift, and go to state 9
    "not"       shift, and go to state 10
    '('         shift, and go to state 11
    "nil"       shift, and go to state 12
    "("         shift, and go to state 13
    "["         shift, and go to state 14
    "return"    shift, and go to state 18
    "break"     shift, and go to state 19
    "continue"  shift, and go to state 20

    sExpr           go to state 25
    symbol          go to state 26
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32
    exprStmt        go to state 33
    returnStmt      go to state 34
    breakStmt       go to state 35
    continueStmt    go to state 36
    simpleStmt      go to state 148
    stmt            go to state 192


State 173

   97 typeDef: symbol "=" typeDesc .

    $default  reduce using rule 97 (typeDef)


State 174

   46 primarySuffix: "(" exprList ")" .

    $default  reduce using rule 46 (primarySuffix)


State 175

   48 primarySuffix: "[" expr "]" .

    $default  reduce using rule 48 (primarySuffix)


State 176

    4 module2: INDEQ complexOrSimpleStmt module2 .

    $default  reduce using rule 4 (module2)


State 177

   51 condExpr: expr colon expr . elifCondExpr

    "elif"  shift, and go to state 193
    "else"  shift, and go to state 194

    elifCondExpr  go to state 195


State 178

  116 stmt: INDG complexOrSimpleStmt . stmt2 DED

    INDEQ  shift, and go to state 196

    $default  reduce using rule 119 (stmt2)

    stmt2  go to state 197


State 179

   92 elifCondStmt: INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 198
    primary         go to state 32


State 180

   90 condStmt: expr colonBody INDEQ "else" . colonBody

    ":"  shift, and go to state 103

    colon      go to state 104
    colonBody  go to state 199


State 181

   88 condStmt: expr colonBody elifCondStmt INDEQ . "else" colonBody
   91 elifCondStmt: elifCondStmt INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 200
    "else"  shift, and go to state 201


State 182

  103 serVariable: INDEQ variable . serVariable

    INDEQ  shift, and go to state 152

    $default  reduce using rule 104 (serVariable)

    serVariable  go to state 202


State 183

  102 secVariable: INDG variable serVariable DED .

    $default  reduce using rule 102 (secVariable)


State 184

   57 inlTupleDecl: "tuple" "[" . declColonCommaNoHang "]"

    IDENT  shift, and go to state 6

    symbol                go to state 56
    declColon             go to state 169
    declColonCommaNoHang  go to state 203


State 185

   58 arrayDecl: "array" "[" . INTLIT comma typeDesc "]"

    INTLIT  shift, and go to state 204


State 186

   67 typeDescFunc: "var" typeDesc .

    $default  reduce using rule 67 (typeDescFunc)


State 187

   69 forStmt: "for" symbol "in" expr colonBody .

    $default  reduce using rule 69 (forStmt)


State 188

   68 forStmt: "for" symbolCommaNoHang "in" expr colonBody .

    $default  reduce using rule 68 (forStmt)


State 189

   61 declColonCommaNoHang: declColon comma . declColonCommaNoHang

    IDENT  shift, and go to state 6

    symbol                go to state 56
    declColon             go to state 169
    declColonCommaNoHang  go to state 205


State 190

   59 paramList: "(" declColonCommaNoHang ")" .

    $default  reduce using rule 59 (paramList)


State 191

   63 paramListColon: paramList ":" typeDescFunc .

    $default  reduce using rule 63 (paramListColon)


State 192

   95 routine: symbol paramListColon "=" stmt .

    $default  reduce using rule 95 (routine)


State 193

   52 elifCondExpr: "elif" . expr colon expr elifCondExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 206
    primary         go to state 32


State 194

   53 elifCondExpr: "else" . colon expr

    ":"  shift, and go to state 103

    colon  go to state 207


State 195

   51 condExpr: expr colon expr elifCondExpr .

    $default  reduce using rule 51 (condExpr)


State 196

  118 stmt2: INDEQ . complexOrSimpleStmt stmt2

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    "-"         shift, and go to state 7
    "+"         shift, and go to state 8
    "$"         shift, and go to state 9
    "not"       shift, and go to state 10
    '('         shift, and go to state 11
    "nil"       shift, and go to state 12
    "("         shift, and go to state 13
    "["         shift, and go to state 14
    "if"        shift, and go to state 15
    "var"       shift, and go to state 16
    "for"       shift, and go to state 17
    "return"    shift, and go to state 18
    "break"     shift, and go to state 19
    "continue"  shift, and go to state 20
    "while"     shift, and go to state 21
    "proc"      shift, and go to state 22
    "type"      shift, and go to state 23

    sExpr                go to state 25
    symbol               go to state 26
    literal              go to state 27
    identOrLiteral       go to state 28
    tupleConstr          go to state 29
    arrayConstr          go to state 30
    forStmt              go to state 31
    primary              go to state 32
    exprStmt             go to state 33
    returnStmt           go to state 34
    breakStmt            go to state 35
    continueStmt         go to state 36
    ifStmt               go to state 37
    whileStmt            go to state 38
    simpleStmt           go to state 39
    complexOrSimpleStmt  go to state 208


State 197

  116 stmt: INDG complexOrSimpleStmt stmt2 . DED

    DED  shift, and go to state 209


State 198

   92 elifCondStmt: INDEQ "elif" expr . colonBody

    ":"  shift, and go to state 103

    colon      go to state 104
    colonBody  go to state 210


State 199

   90 condStmt: expr colonBody INDEQ "else" colonBody .

    $default  reduce using rule 90 (condStmt)


State 200

   91 elifCondStmt: elifCondStmt INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 211
    primary         go to state 32


State 201

   88 condStmt: expr colonBody elifCondStmt INDEQ "else" . colonBody

    ":"  shift, and go to state 103

    colon      go to state 104
    colonBody  go to state 212


State 202

  103 serVariable: INDEQ variable serVariable .

    $default  reduce using rule 103 (serVariable)


State 203

   57 inlTupleDecl: "tuple" "[" declColonCommaNoHang . "]"

    "]"  shift, and go to state 213


State 204

   58 arrayDecl: "array" "[" INTLIT . comma typeDesc "]"

    ","  shift, and go to state 100

    comma  go to state 214


State 205

   61 declColonCommaNoHang: declColon comma declColonCommaNoHang .

    $default  reduce using rule 61 (declColonCommaNoHang)


State 206

   52 elifCondExpr: "elif" expr . colon expr elifCondExpr

    ":"  shift, and go to state 103

    colon  go to state 215


State 207

   53 elifCondExpr: "else" colon . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 216
    primary         go to state 32


State 208

  118 stmt2: INDEQ complexOrSimpleStmt . stmt2

    INDEQ  shift, and go to state 196

    $default  reduce using rule 119 (stmt2)

    stmt2  go to state 217


State 209

  116 stmt: INDG complexOrSimpleStmt stmt2 DED .

    $default  reduce using rule 116 (stmt)


State 210

   92 elifCondStmt: INDEQ "elif" expr colonBody .

    $default  reduce using rule 92 (elifCondStmt)


State 211

   91 elifCondStmt: elifCondStmt INDEQ "elif" expr . colonBody

    ":"  shift, and go to state 103

    colon      go to state 104
    colonBody  go to state 218


State 212

   88 condStmt: expr colonBody elifCondStmt INDEQ "else" colonBody .

    $default  reduce using rule 88 (condStmt)


State 213

   57 inlTupleDecl: "tuple" "[" declColonCommaNoHang "]" .

    $default  reduce using rule 57 (inlTupleDecl)


State 214

   58 arrayDecl: "array" "[" INTLIT comma . typeDesc "]"

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 154
    "array"  shift, and go to state 155

    symbol        go to state 157
    inlTupleDecl  go to state 158
    arrayDecl     go to state 159
    typeDesc      go to state 219


State 215

   52 elifCondExpr: "elif" expr colon . expr elifCondExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "-"       shift, and go to state 7
    "+"       shift, and go to state 8
    "$"       shift, and go to state 9
    "not"     shift, and go to state 10
    '('       shift, and go to state 11
    "nil"     shift, and go to state 12
    "("       shift, and go to state 13
    "["       shift, and go to state 14
    "if"      shift, and go to state 47

    sExpr           go to state 48
    symbol          go to state 42
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 50
    expr            go to state 220
    primary         go to state 32


State 216

   53 elifCondExpr: "else" colon expr .

    $default  reduce using rule 53 (elifCondExpr)


State 217

  118 stmt2: INDEQ complexOrSimpleStmt stmt2 .

    $default  reduce using rule 118 (stmt2)


State 218

   91 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody .

    $default  reduce using rule 91 (elifCondStmt)


State 219

   58 arrayDecl: "array" "[" INTLIT comma typeDesc . "]"

    "]"  shift, and go to state 221


State 220

   52 elifCondExpr: "elif" expr colon expr . elifCondExpr

    "elif"  shift, and go to state 193
    "else"  shift, and go to state 194

    elifCondExpr  go to state 222


State 221

   58 arrayDecl: "array" "[" INTLIT comma typeDesc "]" .

    $default  reduce using rule 58 (arrayDecl)


State 222

   52 elifCondExpr: "elif" expr colon expr elifCondExpr .

    $default  reduce using rule 52 (elifCondExpr)
