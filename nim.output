Terminals unused in grammar

   ELSEX


State 63 conflicts: 1 shift/reduce


Grammar

    0 $accept: module $end

    1 module: complexOrSimpleStmt
    2       | module2 INDEQ complexOrSimpleStmt
    3       | %empty

    4 module2: module2 INDEQ complexOrSimpleStmt
    5        | complexOrSimpleStmt

    6 comma: ','

    7 colon: ':'

    8 sExpr: sExpr "xor" sExpr
    9      | sExpr "or" sExpr
   10      | sExpr "and" sExpr
   11      | sExpr "!=" sExpr
   12      | sExpr '>' sExpr
   13      | sExpr ">=" sExpr
   14      | sExpr '<' sExpr
   15      | sExpr "<=" sExpr
   16      | sExpr "==" sExpr
   17      | sExpr ".." sExpr
   18      | sExpr '-' sExpr
   19      | sExpr '+' sExpr
   20      | sExpr '%' sExpr
   21      | sExpr "mod" sExpr
   22      | sExpr "div" sExpr
   23      | sExpr '/' sExpr
   24      | sExpr '*' sExpr
   25      | '+' sExpr
   26      | '-' sExpr
   27      | '$' sExpr
   28      | "not" sExpr
   29      | '(' sExpr ')'
   30      | primary

   31 symbol: IDENT

   32 exprList: expr comma exprList
   33         | expr

   34 literal: BOOLLIT
   35        | INTLIT
   36        | FLOATLIT
   37        | STRLIT
   38        | CHARLIT
   39        | "nil"

   40 identOrLiteral: symbol
   41               | literal
   42               | arrayConstr
   43               | tupleConstr

   44 tupleConstr: '(' exprList ')'

   45 arrayConstr: '[' exprList ']'

   46 primarySuffix: '(' exprList ')'
   47              | '(' ')'
   48              | '[' expr ']'
   49              | '.' symbol

   50 ifExpr: "if" condExpr

   51 condExpr: expr colon expr elifCondExpr

   52 elifCondExpr: "elif" expr colon expr elifCondExpr
   53             | "else" colon expr

   54 symbolCommaNoHang: symbolCommaNoHang comma symbol
   55                  | symbol comma symbol

   56 declColon: symbol ':' typeDesc

   57 inlTupleDecl: "tuple" '[' declColonCommaNoHang ']'

   58 arrayDecl: "array" '[' INTLIT comma typeDesc ']'

   59 paramList: '(' declColonCommaNoHang ')'
   60          | '(' ')'

   61 declColonCommaNoHang: declColon comma declColonCommaNoHang
   62                     | declColon

   63 paramListColon: paramList ':' typeDesc
   64               | ':' typeDesc
   65               | %empty

   66 forStmt: "for" symbolCommaNoHang "in" expr colonBody
   67        | "for" symbol "in" expr colonBody

   68 expr: ifExpr
   69     | sExpr

   70 primary: identOrLiteral primary2
   71        | identOrLiteral

   72 primary2: primarySuffix primary2
   73         | primarySuffix

   74 typeDesc: symbol
   75         | inlTupleDecl
   76         | arrayDecl

   77 exprStmt: sExpr
   78         | symbol '=' expr
   79         | symbol "+=" expr
   80         | symbol "*=" expr

   81 returnStmt: "return" expr
   82           | "return"

   83 breakStmt: "break"

   84 continueStmt: "continue"

   85 ifStmt: "if" expr colonBody INDEQ elifCondStmt
   86       | "if" expr colonBody INDEQ elifCondStmt "else" colonBody
   87       | "if" expr colonBody
   88       | "if" expr colonBody INDEQ "else" colonBody

   89 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody
   90             | INDEQ "elif" expr colonBody

   91 whileStmt: "while" expr colonBody

   92 routine: symbol paramListColon '=' stmt
   93        | symbol paramListColon

   94 typeDef: symbol '=' typeDesc

   95 colonBody: colon stmt

   96 variable: declColon '=' expr
   97         | declColon

   98 secVariable: variable
   99            | INDG variable serVariable DED

  100 serVariable: INDEQ variable serVariable
  101            | %empty

  102 simpleStmt: returnStmt
  103           | breakStmt
  104           | continueStmt
  105           | exprStmt

  106 complexOrSimpleStmt: ifStmt
  107                    | whileStmt
  108                    | forStmt
  109                    | "proc" routine
  110                    | "type" typeDef
  111                    | "var" secVariable
  112                    | simpleStmt

  113 stmt: simpleStmt
  114     | INDG stmt2 complexOrSimpleStmt DED

  115 stmt2: stmt2 complexOrSimpleStmt INDEQ
  116      | %empty


Terminals, with rules where they appear

$end (0) 0
'$' (36) 27
'%' (37) 20
'(' (40) 29 44 46 47 59 60
')' (41) 29 44 46 47 59 60
'*' (42) 24
'+' (43) 19 25
',' (44) 6
'-' (45) 18 26
'.' (46) 49
'/' (47) 23
':' (58) 7 56 63 64
'<' (60) 14
'=' (61) 78 92 94 96
'>' (62) 12
'[' (91) 45 48 57 58
']' (93) 45 48 57 58
error (256)
INTLIT (258) 35 58
FLOATLIT (259) 36
STRLIT (260) 37
CHARLIT (261) 38
BOOLLIT (262) 34
IDENT (263) 31
INDG (264) 99 114
INDEQ (265) 2 4 85 86 88 89 90 100 115
DED (266) 99 114
"break" (267) 83
"continue" (268) 84
"elif" (269) 52 89 90
"else" (270) 53 86 88
"for" (271) 66 67
"if" (272) 50 85 86 87 88
"in" (273) 66 67
"nil" (274) 39
"proc" (275) 109
"return" (276) 81 82
"tuple" (277) 57
"type" (278) 110
"var" (279) 111
"while" (280) 91
IFX (281)
ELSEX (282)
"xor" (283) 8
"or" (284) 9
"and" (285) 10
"!=" (286) 11
">=" (287) 13
"<=" (288) 15
"==" (289) 16
".." (290) 17
"mod" (291) 21
"div" (292) 22
"not" (293) 28
"+=" (294) 79
"*=" (295) 80
UPLUS (296)
UMINUS (297)
LPAREN (298)
"array" (299) 58


Nonterminals, with rules where they appear

$accept (61)
    on left: 0
module (62)
    on left: 1 2 3, on right: 0
module2 (63)
    on left: 4 5, on right: 2 4
comma (64)
    on left: 6, on right: 32 54 55 58 61
colon (65)
    on left: 7, on right: 51 52 53 95
sExpr (66)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28 29 30, on right: 8 9 10 11 12 13 14 15 16 17 18 19 20 21
    22 23 24 25 26 27 28 29 69 77
symbol (67)
    on left: 31, on right: 40 49 54 55 56 67 74 78 79 80 92 93 94
exprList (68)
    on left: 32 33, on right: 32 44 45 46
literal (69)
    on left: 34 35 36 37 38 39, on right: 41
identOrLiteral (70)
    on left: 40 41 42 43, on right: 70 71
tupleConstr (71)
    on left: 44, on right: 43
arrayConstr (72)
    on left: 45, on right: 42
primarySuffix (73)
    on left: 46 47 48 49, on right: 72 73
ifExpr (74)
    on left: 50, on right: 68
condExpr (75)
    on left: 51, on right: 50
elifCondExpr (76)
    on left: 52 53, on right: 51 52
symbolCommaNoHang (77)
    on left: 54 55, on right: 54 66
declColon (78)
    on left: 56, on right: 61 62 96 97
inlTupleDecl (79)
    on left: 57, on right: 75
arrayDecl (80)
    on left: 58, on right: 76
paramList (81)
    on left: 59 60, on right: 63
declColonCommaNoHang (82)
    on left: 61 62, on right: 57 59 61
paramListColon (83)
    on left: 63 64 65, on right: 92 93
forStmt (84)
    on left: 66 67, on right: 108
expr (85)
    on left: 68 69, on right: 32 33 48 51 52 53 66 67 78 79 80 81 85
    86 87 88 89 90 91 96
primary (86)
    on left: 70 71, on right: 30
primary2 (87)
    on left: 72 73, on right: 70 72
typeDesc (88)
    on left: 74 75 76, on right: 56 58 63 64 94
exprStmt (89)
    on left: 77 78 79 80, on right: 105
returnStmt (90)
    on left: 81 82, on right: 102
breakStmt (91)
    on left: 83, on right: 103
continueStmt (92)
    on left: 84, on right: 104
ifStmt (93)
    on left: 85 86 87 88, on right: 106
elifCondStmt (94)
    on left: 89 90, on right: 85 86 89
whileStmt (95)
    on left: 91, on right: 107
routine (96)
    on left: 92 93, on right: 109
typeDef (97)
    on left: 94, on right: 110
colonBody (98)
    on left: 95, on right: 66 67 85 86 87 88 89 90 91
variable (99)
    on left: 96 97, on right: 98 99 100
secVariable (100)
    on left: 98 99, on right: 111
serVariable (101)
    on left: 100 101, on right: 99 100
simpleStmt (102)
    on left: 102 103 104 105, on right: 112 113
complexOrSimpleStmt (103)
    on left: 106 107 108 109 110 111 112, on right: 1 2 4 5 114 115
stmt (104)
    on left: 113 114, on right: 92 95
stmt2 (105)
    on left: 115 116, on right: 114 115


State 0

    0 $accept: . module $end

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    "break"     shift, and go to state 7
    "continue"  shift, and go to state 8
    "for"       shift, and go to state 9
    "if"        shift, and go to state 10
    "nil"       shift, and go to state 11
    "proc"      shift, and go to state 12
    "return"    shift, and go to state 13
    "type"      shift, and go to state 14
    "var"       shift, and go to state 15
    "while"     shift, and go to state 16
    "not"       shift, and go to state 17
    '-'         shift, and go to state 18
    '+'         shift, and go to state 19
    '$'         shift, and go to state 20
    '('         shift, and go to state 21
    '['         shift, and go to state 22

    $default  reduce using rule 3 (module)

    module               go to state 23
    module2              go to state 24
    sExpr                go to state 25
    symbol               go to state 26
    literal              go to state 27
    identOrLiteral       go to state 28
    tupleConstr          go to state 29
    arrayConstr          go to state 30
    forStmt              go to state 31
    primary              go to state 32
    exprStmt             go to state 33
    returnStmt           go to state 34
    breakStmt            go to state 35
    continueStmt         go to state 36
    ifStmt               go to state 37
    whileStmt            go to state 38
    simpleStmt           go to state 39
    complexOrSimpleStmt  go to state 40


State 1

   35 literal: INTLIT .

    $default  reduce using rule 35 (literal)


State 2

   36 literal: FLOATLIT .

    $default  reduce using rule 36 (literal)


State 3

   37 literal: STRLIT .

    $default  reduce using rule 37 (literal)


State 4

   38 literal: CHARLIT .

    $default  reduce using rule 38 (literal)


State 5

   34 literal: BOOLLIT .

    $default  reduce using rule 34 (literal)


State 6

   31 symbol: IDENT .

    $default  reduce using rule 31 (symbol)


State 7

   83 breakStmt: "break" .

    $default  reduce using rule 83 (breakStmt)


State 8

   84 continueStmt: "continue" .

    $default  reduce using rule 84 (continueStmt)


State 9

   66 forStmt: "for" . symbolCommaNoHang "in" expr colonBody
   67        | "for" . symbol "in" expr colonBody

    IDENT  shift, and go to state 6

    symbol             go to state 41
    symbolCommaNoHang  go to state 42


State 10

   85 ifStmt: "if" . expr colonBody INDEQ elifCondStmt
   86       | "if" . expr colonBody INDEQ elifCondStmt "else" colonBody
   87       | "if" . expr colonBody
   88       | "if" . expr colonBody INDEQ "else" colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 47
    primary         go to state 32


State 11

   39 literal: "nil" .

    $default  reduce using rule 39 (literal)


State 12

  109 complexOrSimpleStmt: "proc" . routine

    IDENT  shift, and go to state 6

    symbol   go to state 48
    routine  go to state 49


State 13

   81 returnStmt: "return" . expr
   82           | "return" .

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    $default  reduce using rule 82 (returnStmt)

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 50
    primary         go to state 32


State 14

  110 complexOrSimpleStmt: "type" . typeDef

    IDENT  shift, and go to state 6

    symbol   go to state 51
    typeDef  go to state 52


State 15

  111 complexOrSimpleStmt: "var" . secVariable

    IDENT  shift, and go to state 6
    INDG   shift, and go to state 53

    symbol       go to state 54
    declColon    go to state 55
    variable     go to state 56
    secVariable  go to state 57


State 16

   91 whileStmt: "while" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 58
    primary         go to state 32


State 17

   28 sExpr: "not" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 59
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 18

   26 sExpr: '-' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 60
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 19

   25 sExpr: '+' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 61
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 20

   27 sExpr: '$' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 62
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 21

   29 sExpr: '(' . sExpr ')'
   44 tupleConstr: '(' . exprList ')'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 63
    symbol          go to state 45
    exprList        go to state 64
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 65
    primary         go to state 32


State 22

   45 arrayConstr: '[' . exprList ']'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    exprList        go to state 66
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 65
    primary         go to state 32


State 23

    0 $accept: module . $end

    $end  shift, and go to state 67


State 24

    2 module: module2 . INDEQ complexOrSimpleStmt
    4 module2: module2 . INDEQ complexOrSimpleStmt

    INDEQ  shift, and go to state 68


State 25

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr
   77 exprStmt: sExpr .

    "xor"  shift, and go to state 69
    "or"   shift, and go to state 70
    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">="   shift, and go to state 73
    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '>'    shift, and go to state 79
    '<'    shift, and go to state 80
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 77 (exprStmt)


State 26

   40 identOrLiteral: symbol .
   78 exprStmt: symbol . '=' expr
   79         | symbol . "+=" expr
   80         | symbol . "*=" expr

    "+="  shift, and go to state 86
    "*="  shift, and go to state 87
    '='   shift, and go to state 88

    $default  reduce using rule 40 (identOrLiteral)


State 27

   41 identOrLiteral: literal .

    $default  reduce using rule 41 (identOrLiteral)


State 28

   70 primary: identOrLiteral . primary2
   71        | identOrLiteral .

    '('  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 71 (primary)

    primarySuffix  go to state 92
    primary2       go to state 93


State 29

   43 identOrLiteral: tupleConstr .

    $default  reduce using rule 43 (identOrLiteral)


State 30

   42 identOrLiteral: arrayConstr .

    $default  reduce using rule 42 (identOrLiteral)


State 31

  108 complexOrSimpleStmt: forStmt .

    $default  reduce using rule 108 (complexOrSimpleStmt)


State 32

   30 sExpr: primary .

    $default  reduce using rule 30 (sExpr)


State 33

  105 simpleStmt: exprStmt .

    $default  reduce using rule 105 (simpleStmt)


State 34

  102 simpleStmt: returnStmt .

    $default  reduce using rule 102 (simpleStmt)


State 35

  103 simpleStmt: breakStmt .

    $default  reduce using rule 103 (simpleStmt)


State 36

  104 simpleStmt: continueStmt .

    $default  reduce using rule 104 (simpleStmt)


State 37

  106 complexOrSimpleStmt: ifStmt .

    $default  reduce using rule 106 (complexOrSimpleStmt)


State 38

  107 complexOrSimpleStmt: whileStmt .

    $default  reduce using rule 107 (complexOrSimpleStmt)


State 39

  112 complexOrSimpleStmt: simpleStmt .

    $default  reduce using rule 112 (complexOrSimpleStmt)


State 40

    1 module: complexOrSimpleStmt .
    5 module2: complexOrSimpleStmt .

    INDEQ     reduce using rule 5 (module2)
    $default  reduce using rule 1 (module)


State 41

   55 symbolCommaNoHang: symbol . comma symbol
   67 forStmt: "for" symbol . "in" expr colonBody

    "in"  shift, and go to state 94
    ','   shift, and go to state 95

    comma  go to state 96


State 42

   54 symbolCommaNoHang: symbolCommaNoHang . comma symbol
   66 forStmt: "for" symbolCommaNoHang . "in" expr colonBody

    "in"  shift, and go to state 97
    ','   shift, and go to state 95

    comma  go to state 98


State 43

   50 ifExpr: "if" . condExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    condExpr        go to state 99
    expr            go to state 100
    primary         go to state 32


State 44

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr
   69 expr: sExpr .

    "xor"  shift, and go to state 69
    "or"   shift, and go to state 70
    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">="   shift, and go to state 73
    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '>'    shift, and go to state 79
    '<'    shift, and go to state 80
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 69 (expr)


State 45

   40 identOrLiteral: symbol .

    $default  reduce using rule 40 (identOrLiteral)


State 46

   68 expr: ifExpr .

    $default  reduce using rule 68 (expr)


State 47

   85 ifStmt: "if" expr . colonBody INDEQ elifCondStmt
   86       | "if" expr . colonBody INDEQ elifCondStmt "else" colonBody
   87       | "if" expr . colonBody
   88       | "if" expr . colonBody INDEQ "else" colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 103


State 48

   92 routine: symbol . paramListColon '=' stmt
   93        | symbol . paramListColon

    ':'  shift, and go to state 104
    '('  shift, and go to state 105

    $default  reduce using rule 65 (paramListColon)

    paramList       go to state 106
    paramListColon  go to state 107


State 49

  109 complexOrSimpleStmt: "proc" routine .

    $default  reduce using rule 109 (complexOrSimpleStmt)


State 50

   81 returnStmt: "return" expr .

    $default  reduce using rule 81 (returnStmt)


State 51

   94 typeDef: symbol . '=' typeDesc

    '='  shift, and go to state 108


State 52

  110 complexOrSimpleStmt: "type" typeDef .

    $default  reduce using rule 110 (complexOrSimpleStmt)


State 53

   99 secVariable: INDG . variable serVariable DED

    IDENT  shift, and go to state 6

    symbol     go to state 54
    declColon  go to state 55
    variable   go to state 109


State 54

   56 declColon: symbol . ':' typeDesc

    ':'  shift, and go to state 110


State 55

   96 variable: declColon . '=' expr
   97         | declColon .

    '='  shift, and go to state 111

    $default  reduce using rule 97 (variable)


State 56

   98 secVariable: variable .

    $default  reduce using rule 98 (secVariable)


State 57

  111 complexOrSimpleStmt: "var" secVariable .

    $default  reduce using rule 111 (complexOrSimpleStmt)


State 58

   91 whileStmt: "while" expr . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 112


State 59

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr
   28      | "not" sExpr .

    $default  reduce using rule 28 (sExpr)


State 60

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr
   26      | '-' sExpr .

    $default  reduce using rule 26 (sExpr)


State 61

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr
   25      | '+' sExpr .

    $default  reduce using rule 25 (sExpr)


State 62

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr
   27      | '$' sExpr .

    $default  reduce using rule 27 (sExpr)


State 63

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr
   29      | '(' sExpr . ')'
   69 expr: sExpr .

    "xor"  shift, and go to state 69
    "or"   shift, and go to state 70
    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">="   shift, and go to state 73
    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '>'    shift, and go to state 79
    '<'    shift, and go to state 80
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85
    ')'    shift, and go to state 113

    ')'       [reduce using rule 69 (expr)]
    $default  reduce using rule 69 (expr)


State 64

   44 tupleConstr: '(' exprList . ')'

    ')'  shift, and go to state 114


State 65

   32 exprList: expr . comma exprList
   33         | expr .

    ','  shift, and go to state 95

    $default  reduce using rule 33 (exprList)

    comma  go to state 115


State 66

   45 arrayConstr: '[' exprList . ']'

    ']'  shift, and go to state 116


State 67

    0 $accept: module $end .

    $default  accept


State 68

    2 module: module2 INDEQ . complexOrSimpleStmt
    4 module2: module2 INDEQ . complexOrSimpleStmt

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    "break"     shift, and go to state 7
    "continue"  shift, and go to state 8
    "for"       shift, and go to state 9
    "if"        shift, and go to state 10
    "nil"       shift, and go to state 11
    "proc"      shift, and go to state 12
    "return"    shift, and go to state 13
    "type"      shift, and go to state 14
    "var"       shift, and go to state 15
    "while"     shift, and go to state 16
    "not"       shift, and go to state 17
    '-'         shift, and go to state 18
    '+'         shift, and go to state 19
    '$'         shift, and go to state 20
    '('         shift, and go to state 21
    '['         shift, and go to state 22

    sExpr                go to state 25
    symbol               go to state 26
    literal              go to state 27
    identOrLiteral       go to state 28
    tupleConstr          go to state 29
    arrayConstr          go to state 30
    forStmt              go to state 31
    primary              go to state 32
    exprStmt             go to state 33
    returnStmt           go to state 34
    breakStmt            go to state 35
    continueStmt         go to state 36
    ifStmt               go to state 37
    whileStmt            go to state 38
    simpleStmt           go to state 39
    complexOrSimpleStmt  go to state 117


State 69

    8 sExpr: sExpr "xor" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 118
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 70

    9 sExpr: sExpr "or" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 119
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 71

   10 sExpr: sExpr "and" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 120
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 72

   11 sExpr: sExpr "!=" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 121
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 73

   13 sExpr: sExpr ">=" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 122
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 74

   15 sExpr: sExpr "<=" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 123
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 75

   16 sExpr: sExpr "==" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 124
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 76

   17 sExpr: sExpr ".." . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 125
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 77

   21 sExpr: sExpr "mod" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 126
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 78

   22 sExpr: sExpr "div" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 127
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 79

   12 sExpr: sExpr '>' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 128
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 80

   14 sExpr: sExpr '<' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 129
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 81

   18 sExpr: sExpr '-' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 130
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 82

   19 sExpr: sExpr '+' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 131
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 83

   20 sExpr: sExpr '%' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 132
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 84

   23 sExpr: sExpr '/' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 133
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 85

   24 sExpr: sExpr '*' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 134
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32


State 86

   79 exprStmt: symbol "+=" . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 135
    primary         go to state 32


State 87

   80 exprStmt: symbol "*=" . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 136
    primary         go to state 32


State 88

   78 exprStmt: symbol '=' . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 137
    primary         go to state 32


State 89

   46 primarySuffix: '(' . exprList ')'
   47              | '(' . ')'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    ')'       shift, and go to state 138
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    exprList        go to state 139
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 65
    primary         go to state 32


State 90

   48 primarySuffix: '[' . expr ']'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 140
    primary         go to state 32


State 91

   49 primarySuffix: '.' . symbol

    IDENT  shift, and go to state 6

    symbol  go to state 141


State 92

   72 primary2: primarySuffix . primary2
   73         | primarySuffix .

    '('  shift, and go to state 89
    '['  shift, and go to state 90
    '.'  shift, and go to state 91

    $default  reduce using rule 73 (primary2)

    primarySuffix  go to state 92
    primary2       go to state 142


State 93

   70 primary: identOrLiteral primary2 .

    $default  reduce using rule 70 (primary)


State 94

   67 forStmt: "for" symbol "in" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 143
    primary         go to state 32


State 95

    6 comma: ',' .

    $default  reduce using rule 6 (comma)


State 96

   55 symbolCommaNoHang: symbol comma . symbol

    IDENT  shift, and go to state 6

    symbol  go to state 144


State 97

   66 forStmt: "for" symbolCommaNoHang "in" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 145
    primary         go to state 32


State 98

   54 symbolCommaNoHang: symbolCommaNoHang comma . symbol

    IDENT  shift, and go to state 6

    symbol  go to state 146


State 99

   50 ifExpr: "if" condExpr .

    $default  reduce using rule 50 (ifExpr)


State 100

   51 condExpr: expr . colon expr elifCondExpr

    ':'  shift, and go to state 101

    colon  go to state 147


State 101

    7 colon: ':' .

    $default  reduce using rule 7 (colon)


State 102

   95 colonBody: colon . stmt

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    INDG        shift, and go to state 148
    "break"     shift, and go to state 7
    "continue"  shift, and go to state 8
    "nil"       shift, and go to state 11
    "return"    shift, and go to state 13
    "not"       shift, and go to state 17
    '-'         shift, and go to state 18
    '+'         shift, and go to state 19
    '$'         shift, and go to state 20
    '('         shift, and go to state 21
    '['         shift, and go to state 22

    sExpr           go to state 25
    symbol          go to state 26
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32
    exprStmt        go to state 33
    returnStmt      go to state 34
    breakStmt       go to state 35
    continueStmt    go to state 36
    simpleStmt      go to state 149
    stmt            go to state 150


State 103

   85 ifStmt: "if" expr colonBody . INDEQ elifCondStmt
   86       | "if" expr colonBody . INDEQ elifCondStmt "else" colonBody
   87       | "if" expr colonBody .
   88       | "if" expr colonBody . INDEQ "else" colonBody

    INDEQ  shift, and go to state 151

    $default  reduce using rule 87 (ifStmt)


State 104

   64 paramListColon: ':' . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 152
    "array"  shift, and go to state 153

    symbol        go to state 154
    inlTupleDecl  go to state 155
    arrayDecl     go to state 156
    typeDesc      go to state 157


State 105

   59 paramList: '(' . declColonCommaNoHang ')'
   60          | '(' . ')'

    IDENT  shift, and go to state 6
    ')'    shift, and go to state 158

    symbol                go to state 54
    declColon             go to state 159
    declColonCommaNoHang  go to state 160


State 106

   63 paramListColon: paramList . ':' typeDesc

    ':'  shift, and go to state 161


State 107

   92 routine: symbol paramListColon . '=' stmt
   93        | symbol paramListColon .

    '='  shift, and go to state 162

    $default  reduce using rule 93 (routine)


State 108

   94 typeDef: symbol '=' . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 152
    "array"  shift, and go to state 153

    symbol        go to state 154
    inlTupleDecl  go to state 155
    arrayDecl     go to state 156
    typeDesc      go to state 163


State 109

   99 secVariable: INDG variable . serVariable DED

    INDEQ  shift, and go to state 164

    $default  reduce using rule 101 (serVariable)

    serVariable  go to state 165


State 110

   56 declColon: symbol ':' . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 152
    "array"  shift, and go to state 153

    symbol        go to state 154
    inlTupleDecl  go to state 155
    arrayDecl     go to state 156
    typeDesc      go to state 166


State 111

   96 variable: declColon '=' . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 167
    primary         go to state 32


State 112

   91 whileStmt: "while" expr colonBody .

    $default  reduce using rule 91 (whileStmt)


State 113

   29 sExpr: '(' sExpr ')' .

    $default  reduce using rule 29 (sExpr)


State 114

   44 tupleConstr: '(' exprList ')' .

    $default  reduce using rule 44 (tupleConstr)


State 115

   32 exprList: expr comma . exprList

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    exprList        go to state 168
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 65
    primary         go to state 32


State 116

   45 arrayConstr: '[' exprList ']' .

    $default  reduce using rule 45 (arrayConstr)


State 117

    2 module: module2 INDEQ complexOrSimpleStmt .
    4 module2: module2 INDEQ complexOrSimpleStmt .

    INDEQ     reduce using rule 4 (module2)
    $default  reduce using rule 2 (module)


State 118

    8 sExpr: sExpr . "xor" sExpr
    8      | sExpr "xor" sExpr .
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "or"   shift, and go to state 70
    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">="   shift, and go to state 73
    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '>'    shift, and go to state 79
    '<'    shift, and go to state 80
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 8 (sExpr)


State 119

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
    9      | sExpr "or" sExpr .
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "and"  shift, and go to state 71
    "!="   shift, and go to state 72
    ">="   shift, and go to state 73
    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '>'    shift, and go to state 79
    '<'    shift, and go to state 80
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 9 (sExpr)


State 120

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   10      | sExpr "and" sExpr .
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "!="   shift, and go to state 72
    ">="   shift, and go to state 73
    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '>'    shift, and go to state 79
    '<'    shift, and go to state 80
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 10 (sExpr)


State 121

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   11      | sExpr "!=" sExpr .
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    ">="   shift, and go to state 73
    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '>'    shift, and go to state 79
    '<'    shift, and go to state 80
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 11 (sExpr)


State 122

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   13      | sExpr ">=" sExpr .
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '<'    shift, and go to state 80
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 13 (sExpr)


State 123

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   15      | sExpr "<=" sExpr .
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 15 (sExpr)


State 124

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   16      | sExpr "==" sExpr .
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 16 (sExpr)


State 125

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   17      | sExpr ".." sExpr .
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 17 (sExpr)


State 126

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   21      | sExpr "mod" sExpr .
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "div"  shift, and go to state 78
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 21 (sExpr)


State 127

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   22      | sExpr "div" sExpr .
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    '/'  shift, and go to state 84
    '*'  shift, and go to state 85

    $default  reduce using rule 22 (sExpr)


State 128

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   12      | sExpr '>' sExpr .
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    ">="   shift, and go to state 73
    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '<'    shift, and go to state 80
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 12 (sExpr)


State 129

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   14      | sExpr '<' sExpr .
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "<="   shift, and go to state 74
    "=="   shift, and go to state 75
    ".."   shift, and go to state 76
    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '-'    shift, and go to state 81
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 14 (sExpr)


State 130

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   18      | sExpr '-' sExpr .
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '+'    shift, and go to state 82
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 18 (sExpr)


State 131

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   19      | sExpr '+' sExpr .
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '%'    shift, and go to state 83
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 19 (sExpr)


State 132

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   20      | sExpr '%' sExpr .
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr

    "mod"  shift, and go to state 77
    "div"  shift, and go to state 78
    '/'    shift, and go to state 84
    '*'    shift, and go to state 85

    $default  reduce using rule 20 (sExpr)


State 133

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   23      | sExpr '/' sExpr .
   24      | sExpr . '*' sExpr

    '*'  shift, and go to state 85

    $default  reduce using rule 23 (sExpr)


State 134

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . ".." sExpr
   18      | sExpr . '-' sExpr
   19      | sExpr . '+' sExpr
   20      | sExpr . '%' sExpr
   21      | sExpr . "mod" sExpr
   22      | sExpr . "div" sExpr
   23      | sExpr . '/' sExpr
   24      | sExpr . '*' sExpr
   24      | sExpr '*' sExpr .

    $default  reduce using rule 24 (sExpr)


State 135

   79 exprStmt: symbol "+=" expr .

    $default  reduce using rule 79 (exprStmt)


State 136

   80 exprStmt: symbol "*=" expr .

    $default  reduce using rule 80 (exprStmt)


State 137

   78 exprStmt: symbol '=' expr .

    $default  reduce using rule 78 (exprStmt)


State 138

   47 primarySuffix: '(' ')' .

    $default  reduce using rule 47 (primarySuffix)


State 139

   46 primarySuffix: '(' exprList . ')'

    ')'  shift, and go to state 169


State 140

   48 primarySuffix: '[' expr . ']'

    ']'  shift, and go to state 170


State 141

   49 primarySuffix: '.' symbol .

    $default  reduce using rule 49 (primarySuffix)


State 142

   72 primary2: primarySuffix primary2 .

    $default  reduce using rule 72 (primary2)


State 143

   67 forStmt: "for" symbol "in" expr . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 171


State 144

   55 symbolCommaNoHang: symbol comma symbol .

    $default  reduce using rule 55 (symbolCommaNoHang)


State 145

   66 forStmt: "for" symbolCommaNoHang "in" expr . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 172


State 146

   54 symbolCommaNoHang: symbolCommaNoHang comma symbol .

    $default  reduce using rule 54 (symbolCommaNoHang)


State 147

   51 condExpr: expr colon . expr elifCondExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 173
    primary         go to state 32


State 148

  114 stmt: INDG . stmt2 complexOrSimpleStmt DED

    $default  reduce using rule 116 (stmt2)

    stmt2  go to state 174


State 149

  113 stmt: simpleStmt .

    $default  reduce using rule 113 (stmt)


State 150

   95 colonBody: colon stmt .

    $default  reduce using rule 95 (colonBody)


State 151

   85 ifStmt: "if" expr colonBody INDEQ . elifCondStmt
   86       | "if" expr colonBody INDEQ . elifCondStmt "else" colonBody
   88       | "if" expr colonBody INDEQ . "else" colonBody

    INDEQ   shift, and go to state 175
    "else"  shift, and go to state 176

    elifCondStmt  go to state 177


State 152

   57 inlTupleDecl: "tuple" . '[' declColonCommaNoHang ']'

    '['  shift, and go to state 178


State 153

   58 arrayDecl: "array" . '[' INTLIT comma typeDesc ']'

    '['  shift, and go to state 179


State 154

   74 typeDesc: symbol .

    $default  reduce using rule 74 (typeDesc)


State 155

   75 typeDesc: inlTupleDecl .

    $default  reduce using rule 75 (typeDesc)


State 156

   76 typeDesc: arrayDecl .

    $default  reduce using rule 76 (typeDesc)


State 157

   64 paramListColon: ':' typeDesc .

    $default  reduce using rule 64 (paramListColon)


State 158

   60 paramList: '(' ')' .

    $default  reduce using rule 60 (paramList)


State 159

   61 declColonCommaNoHang: declColon . comma declColonCommaNoHang
   62                     | declColon .

    ','  shift, and go to state 95

    $default  reduce using rule 62 (declColonCommaNoHang)

    comma  go to state 180


State 160

   59 paramList: '(' declColonCommaNoHang . ')'

    ')'  shift, and go to state 181


State 161

   63 paramListColon: paramList ':' . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 152
    "array"  shift, and go to state 153

    symbol        go to state 154
    inlTupleDecl  go to state 155
    arrayDecl     go to state 156
    typeDesc      go to state 182


State 162

   92 routine: symbol paramListColon '=' . stmt

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    INDG        shift, and go to state 148
    "break"     shift, and go to state 7
    "continue"  shift, and go to state 8
    "nil"       shift, and go to state 11
    "return"    shift, and go to state 13
    "not"       shift, and go to state 17
    '-'         shift, and go to state 18
    '+'         shift, and go to state 19
    '$'         shift, and go to state 20
    '('         shift, and go to state 21
    '['         shift, and go to state 22

    sExpr           go to state 25
    symbol          go to state 26
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    primary         go to state 32
    exprStmt        go to state 33
    returnStmt      go to state 34
    breakStmt       go to state 35
    continueStmt    go to state 36
    simpleStmt      go to state 149
    stmt            go to state 183


State 163

   94 typeDef: symbol '=' typeDesc .

    $default  reduce using rule 94 (typeDef)


State 164

  100 serVariable: INDEQ . variable serVariable

    IDENT  shift, and go to state 6

    symbol     go to state 54
    declColon  go to state 55
    variable   go to state 184


State 165

   99 secVariable: INDG variable serVariable . DED

    DED  shift, and go to state 185


State 166

   56 declColon: symbol ':' typeDesc .

    $default  reduce using rule 56 (declColon)


State 167

   96 variable: declColon '=' expr .

    $default  reduce using rule 96 (variable)


State 168

   32 exprList: expr comma exprList .

    $default  reduce using rule 32 (exprList)


State 169

   46 primarySuffix: '(' exprList ')' .

    $default  reduce using rule 46 (primarySuffix)


State 170

   48 primarySuffix: '[' expr ']' .

    $default  reduce using rule 48 (primarySuffix)


State 171

   67 forStmt: "for" symbol "in" expr colonBody .

    $default  reduce using rule 67 (forStmt)


State 172

   66 forStmt: "for" symbolCommaNoHang "in" expr colonBody .

    $default  reduce using rule 66 (forStmt)


State 173

   51 condExpr: expr colon expr . elifCondExpr

    "elif"  shift, and go to state 186
    "else"  shift, and go to state 187

    elifCondExpr  go to state 188


State 174

  114 stmt: INDG stmt2 . complexOrSimpleStmt DED
  115 stmt2: stmt2 . complexOrSimpleStmt INDEQ

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    "break"     shift, and go to state 7
    "continue"  shift, and go to state 8
    "for"       shift, and go to state 9
    "if"        shift, and go to state 10
    "nil"       shift, and go to state 11
    "proc"      shift, and go to state 12
    "return"    shift, and go to state 13
    "type"      shift, and go to state 14
    "var"       shift, and go to state 15
    "while"     shift, and go to state 16
    "not"       shift, and go to state 17
    '-'         shift, and go to state 18
    '+'         shift, and go to state 19
    '$'         shift, and go to state 20
    '('         shift, and go to state 21
    '['         shift, and go to state 22

    sExpr                go to state 25
    symbol               go to state 26
    literal              go to state 27
    identOrLiteral       go to state 28
    tupleConstr          go to state 29
    arrayConstr          go to state 30
    forStmt              go to state 31
    primary              go to state 32
    exprStmt             go to state 33
    returnStmt           go to state 34
    breakStmt            go to state 35
    continueStmt         go to state 36
    ifStmt               go to state 37
    whileStmt            go to state 38
    simpleStmt           go to state 39
    complexOrSimpleStmt  go to state 189


State 175

   90 elifCondStmt: INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 190


State 176

   88 ifStmt: "if" expr colonBody INDEQ "else" . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 191


State 177

   85 ifStmt: "if" expr colonBody INDEQ elifCondStmt .
   86       | "if" expr colonBody INDEQ elifCondStmt . "else" colonBody
   89 elifCondStmt: elifCondStmt . INDEQ "elif" expr colonBody

    INDEQ   shift, and go to state 192
    "else"  shift, and go to state 193

    $default  reduce using rule 85 (ifStmt)


State 178

   57 inlTupleDecl: "tuple" '[' . declColonCommaNoHang ']'

    IDENT  shift, and go to state 6

    symbol                go to state 54
    declColon             go to state 159
    declColonCommaNoHang  go to state 194


State 179

   58 arrayDecl: "array" '[' . INTLIT comma typeDesc ']'

    INTLIT  shift, and go to state 195


State 180

   61 declColonCommaNoHang: declColon comma . declColonCommaNoHang

    IDENT  shift, and go to state 6

    symbol                go to state 54
    declColon             go to state 159
    declColonCommaNoHang  go to state 196


State 181

   59 paramList: '(' declColonCommaNoHang ')' .

    $default  reduce using rule 59 (paramList)


State 182

   63 paramListColon: paramList ':' typeDesc .

    $default  reduce using rule 63 (paramListColon)


State 183

   92 routine: symbol paramListColon '=' stmt .

    $default  reduce using rule 92 (routine)


State 184

  100 serVariable: INDEQ variable . serVariable

    INDEQ  shift, and go to state 164

    $default  reduce using rule 101 (serVariable)

    serVariable  go to state 197


State 185

   99 secVariable: INDG variable serVariable DED .

    $default  reduce using rule 99 (secVariable)


State 186

   52 elifCondExpr: "elif" . expr colon expr elifCondExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 198
    primary         go to state 32


State 187

   53 elifCondExpr: "else" . colon expr

    ':'  shift, and go to state 101

    colon  go to state 199


State 188

   51 condExpr: expr colon expr elifCondExpr .

    $default  reduce using rule 51 (condExpr)


State 189

  114 stmt: INDG stmt2 complexOrSimpleStmt . DED
  115 stmt2: stmt2 complexOrSimpleStmt . INDEQ

    INDEQ  shift, and go to state 200
    DED    shift, and go to state 201


State 190

   90 elifCondStmt: INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 202
    primary         go to state 32


State 191

   88 ifStmt: "if" expr colonBody INDEQ "else" colonBody .

    $default  reduce using rule 88 (ifStmt)


State 192

   89 elifCondStmt: elifCondStmt INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 203


State 193

   86 ifStmt: "if" expr colonBody INDEQ elifCondStmt "else" . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 204


State 194

   57 inlTupleDecl: "tuple" '[' declColonCommaNoHang . ']'

    ']'  shift, and go to state 205


State 195

   58 arrayDecl: "array" '[' INTLIT . comma typeDesc ']'

    ','  shift, and go to state 95

    comma  go to state 206


State 196

   61 declColonCommaNoHang: declColon comma declColonCommaNoHang .

    $default  reduce using rule 61 (declColonCommaNoHang)


State 197

  100 serVariable: INDEQ variable serVariable .

    $default  reduce using rule 100 (serVariable)


State 198

   52 elifCondExpr: "elif" expr . colon expr elifCondExpr

    ':'  shift, and go to state 101

    colon  go to state 207


State 199

   53 elifCondExpr: "else" colon . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 208
    primary         go to state 32


State 200

  115 stmt2: stmt2 complexOrSimpleStmt INDEQ .

    $default  reduce using rule 115 (stmt2)


State 201

  114 stmt: INDG stmt2 complexOrSimpleStmt DED .

    $default  reduce using rule 114 (stmt)


State 202

   90 elifCondStmt: INDEQ "elif" expr . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 209


State 203

   89 elifCondStmt: elifCondStmt INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 210
    primary         go to state 32


State 204

   86 ifStmt: "if" expr colonBody INDEQ elifCondStmt "else" colonBody .

    $default  reduce using rule 86 (ifStmt)


State 205

   57 inlTupleDecl: "tuple" '[' declColonCommaNoHang ']' .

    $default  reduce using rule 57 (inlTupleDecl)


State 206

   58 arrayDecl: "array" '[' INTLIT comma . typeDesc ']'

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 152
    "array"  shift, and go to state 153

    symbol        go to state 154
    inlTupleDecl  go to state 155
    arrayDecl     go to state 156
    typeDesc      go to state 211


State 207

   52 elifCondExpr: "elif" expr colon . expr elifCondExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 43
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 17
    '-'       shift, and go to state 18
    '+'       shift, and go to state 19
    '$'       shift, and go to state 20
    '('       shift, and go to state 21
    '['       shift, and go to state 22

    sExpr           go to state 44
    symbol          go to state 45
    literal         go to state 27
    identOrLiteral  go to state 28
    tupleConstr     go to state 29
    arrayConstr     go to state 30
    ifExpr          go to state 46
    expr            go to state 212
    primary         go to state 32


State 208

   53 elifCondExpr: "else" colon expr .

    $default  reduce using rule 53 (elifCondExpr)


State 209

   90 elifCondStmt: INDEQ "elif" expr colonBody .

    $default  reduce using rule 90 (elifCondStmt)


State 210

   89 elifCondStmt: elifCondStmt INDEQ "elif" expr . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 213


State 211

   58 arrayDecl: "array" '[' INTLIT comma typeDesc . ']'

    ']'  shift, and go to state 214


State 212

   52 elifCondExpr: "elif" expr colon expr . elifCondExpr

    "elif"  shift, and go to state 186
    "else"  shift, and go to state 187

    elifCondExpr  go to state 215


State 213

   89 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody .

    $default  reduce using rule 89 (elifCondStmt)


State 214

   58 arrayDecl: "array" '[' INTLIT comma typeDesc ']' .

    $default  reduce using rule 58 (arrayDecl)


State 215

   52 elifCondExpr: "elif" expr colon expr elifCondExpr .

    $default  reduce using rule 52 (elifCondExpr)
