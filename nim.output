Terminals unused in grammar

   "proc"
   "return"
   "tuple"
   "type"


Grammar

    0 $accept: module $end

    1 module: complexOrSimpleStmt
    2       | module2 INDEQ complexOrSimpleStmt
    3       | %empty

    4 module2: module2 INDEQ complexOrSimpleStmt
    5        | complexOrSimpleStmt

    6 comma: ','

    7 colon: ':'

    8 sExpr: sExpr "xor" sExpr
    9      | sExpr "or" sExpr
   10      | sExpr "and" sExpr
   11      | sExpr "!=" sExpr
   12      | sExpr '>' sExpr
   13      | sExpr ">=" sExpr
   14      | sExpr '<' sExpr
   15      | sExpr "<=" sExpr
   16      | sExpr "==" sExpr
   17      | sExpr '-' sExpr
   18      | sExpr '+' sExpr
   19      | sExpr '%' sExpr
   20      | sExpr "mod" sExpr
   21      | sExpr "div" sExpr
   22      | sExpr '/' sExpr
   23      | sExpr '*' sExpr
   24      | '+' sExpr
   25      | '-' sExpr
   26      | '$' sExpr
   27      | "not" sExpr
   28      | '(' sExpr ')'
   29      | primary

   30 symbol: IDENT

   31 echoexprList: echoexprList comma expr
   32             | expr

   33 literal: BOOLLIT
   34        | INTLIT
   35        | FLOATLIT
   36        | STRLIT
   37        | CHARLIT
   38        | "nil"

   39 identOrLiteral: symbol
   40               | literal

   41 arrayDecl: "array" '[' INTLIT comma typeDesc ']'

   42 $@1: %empty

   43 forStmt: "for" symbol "in" expr ".." expr $@1 colonBody

   44 expr: sExpr

   45 arrayDeref: arrayDeref '[' expr ']'
   46           | '[' expr ']'

   47 primary: identOrLiteral
   48        | identOrLiteral arrayDeref

   49 typeDesc: symbol
   50         | arrayDecl

   51 exprStmt: symbol '=' expr
   52         | symbol arrayDeref '=' expr
   53         | symbol "+=" expr
   54         | symbol "*=" expr

   55 breakStmt: "break"

   56 continueStmt: "continue"

   57 ifStmt: "if" expr colonBody elifCondStmt
   58       | "if" expr colonBody elifCondStmt INDEQ "else" colonBody
   59       | "if" expr colonBody
   60       | "if" expr colonBody INDEQ "else" colonBody

   61 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody
   62             | INDEQ "elif" expr colonBody

   63 whileStmt: "while" expr colonBody

   64 $@2: %empty

   65 colonBody: colon $@2 stmt

   66 variable: symbol ':' typeDesc '=' expr
   67         | symbol ':' typeDesc

   68 secVariable: variable
   69            | INDG variable serVariable DED

   70 serVariable: serVariable INDEQ variable
   71            | %empty

   72 simpleStmt: breakStmt
   73           | continueStmt
   74           | exprStmt

   75 complexOrSimpleStmt: ifStmt
   76                    | whileStmt
   77                    | forStmt
   78                    | "echo" echoexprList
   79                    | "var" secVariable
   80                    | "readInt" symbol
   81                    | "readInt" symbol arrayDeref
   82                    | "readFloat" symbol
   83                    | "readFloat" symbol arrayDeref
   84                    | simpleStmt

   85 stmt: simpleStmt
   86     | INDG stmt2 complexOrSimpleStmt DED

   87 stmt2: stmt2 complexOrSimpleStmt INDEQ
   88      | %empty


Terminals, with rules where they appear

$end (0) 0
'$' (36) 26
'%' (37) 19
'(' (40) 28
')' (41) 28
'*' (42) 23
'+' (43) 18 24
',' (44) 6
'-' (45) 17 25
'/' (47) 22
':' (58) 7 66 67
'<' (60) 14
'=' (61) 51 52 66
'>' (62) 12
'[' (91) 41 45 46
']' (93) 41 45 46
error (256)
INTLIT (258) 34 41
FLOATLIT (259) 35
STRLIT (260) 36
CHARLIT (261) 37
BOOLLIT (262) 33
IDENT (263) 30
INDG (264) 69 86
INDEQ (265) 2 4 58 60 61 62 70 87
DED (266) 69 86
"break" (267) 55
"continue" (268) 56
"elif" (269) 61 62
"else" (270) 58 60
"for" (271) 43
"if" (272) 57 58 59 60
"in" (273) 43
"nil" (274) 38
"proc" (275)
"return" (276)
"tuple" (277)
"type" (278)
"var" (279) 79
"while" (280) 63
"echo" (281) 78
"array" (282) 41
"readInt" (283) 80 81
"readFloat" (284) 82 83
IFX (285)
"xor" (286) 8
"or" (287) 9
"and" (288) 10
"!=" (289) 11
">=" (290) 13
"<=" (291) 15
"==" (292) 16
".." (293) 43
"mod" (294) 20
"div" (295) 21
"not" (296) 27
"+=" (297) 53
"*=" (298) 54
UPLUS (299)
UMINUS (300)
LPAREN (301)


Nonterminals, with rules where they appear

$accept (62)
    on left: 0
module (63)
    on left: 1 2 3, on right: 0
module2 (64)
    on left: 4 5, on right: 2 4
comma (65)
    on left: 6, on right: 31 41
colon (66)
    on left: 7, on right: 65
sExpr (67)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28 29, on right: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28 44
symbol (68)
    on left: 30, on right: 39 43 49 51 52 53 54 66 67 80 81 82 83
echoexprList (69)
    on left: 31 32, on right: 31 78
literal (70)
    on left: 33 34 35 36 37 38, on right: 40
identOrLiteral (71)
    on left: 39 40, on right: 47 48
arrayDecl (72)
    on left: 41, on right: 50
forStmt (73)
    on left: 43, on right: 77
$@1 (74)
    on left: 42, on right: 43
expr (75)
    on left: 44, on right: 31 32 43 45 46 51 52 53 54 57 58 59 60 61
    62 63 66
arrayDeref (76)
    on left: 45 46, on right: 45 48 52 81 83
primary (77)
    on left: 47 48, on right: 29
typeDesc (78)
    on left: 49 50, on right: 41 66 67
exprStmt (79)
    on left: 51 52 53 54, on right: 74
breakStmt (80)
    on left: 55, on right: 72
continueStmt (81)
    on left: 56, on right: 73
ifStmt (82)
    on left: 57 58 59 60, on right: 75
elifCondStmt (83)
    on left: 61 62, on right: 57 58 61
whileStmt (84)
    on left: 63, on right: 76
colonBody (85)
    on left: 65, on right: 43 57 58 59 60 61 62 63
$@2 (86)
    on left: 64, on right: 65
variable (87)
    on left: 66 67, on right: 68 69 70
secVariable (88)
    on left: 68 69, on right: 79
serVariable (89)
    on left: 70 71, on right: 69 70
simpleStmt (90)
    on left: 72 73 74, on right: 84 85
complexOrSimpleStmt (91)
    on left: 75 76 77 78 79 80 81 82 83 84, on right: 1 2 4 5 86 87
stmt (92)
    on left: 85 86, on right: 65
stmt2 (93)
    on left: 87 88, on right: 86 87


State 0

    0 $accept: . module $end

    IDENT        shift, and go to state 1
    "break"      shift, and go to state 2
    "continue"   shift, and go to state 3
    "for"        shift, and go to state 4
    "if"         shift, and go to state 5
    "var"        shift, and go to state 6
    "while"      shift, and go to state 7
    "echo"       shift, and go to state 8
    "readInt"    shift, and go to state 9
    "readFloat"  shift, and go to state 10

    $default  reduce using rule 3 (module)

    module               go to state 11
    module2              go to state 12
    symbol               go to state 13
    forStmt              go to state 14
    exprStmt             go to state 15
    breakStmt            go to state 16
    continueStmt         go to state 17
    ifStmt               go to state 18
    whileStmt            go to state 19
    simpleStmt           go to state 20
    complexOrSimpleStmt  go to state 21


State 1

   30 symbol: IDENT .

    $default  reduce using rule 30 (symbol)


State 2

   55 breakStmt: "break" .

    $default  reduce using rule 55 (breakStmt)


State 3

   56 continueStmt: "continue" .

    $default  reduce using rule 56 (continueStmt)


State 4

   43 forStmt: "for" . symbol "in" expr ".." expr $@1 colonBody

    IDENT  shift, and go to state 1

    symbol  go to state 22


State 5

   57 ifStmt: "if" . expr colonBody elifCondStmt
   58       | "if" . expr colonBody elifCondStmt INDEQ "else" colonBody
   59       | "if" . expr colonBody
   60       | "if" . expr colonBody INDEQ "else" colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 38
    primary         go to state 39


State 6

   79 complexOrSimpleStmt: "var" . secVariable

    IDENT  shift, and go to state 1
    INDG   shift, and go to state 40

    symbol       go to state 41
    variable     go to state 42
    secVariable  go to state 43


State 7

   63 whileStmt: "while" . expr colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 44
    primary         go to state 39


State 8

   78 complexOrSimpleStmt: "echo" . echoexprList

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    echoexprList    go to state 45
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 46
    primary         go to state 39


State 9

   80 complexOrSimpleStmt: "readInt" . symbol
   81                    | "readInt" . symbol arrayDeref

    IDENT  shift, and go to state 1

    symbol  go to state 47


State 10

   82 complexOrSimpleStmt: "readFloat" . symbol
   83                    | "readFloat" . symbol arrayDeref

    IDENT  shift, and go to state 1

    symbol  go to state 48


State 11

    0 $accept: module . $end

    $end  shift, and go to state 49


State 12

    2 module: module2 . INDEQ complexOrSimpleStmt
    4 module2: module2 . INDEQ complexOrSimpleStmt

    INDEQ  shift, and go to state 50


State 13

   51 exprStmt: symbol . '=' expr
   52         | symbol . arrayDeref '=' expr
   53         | symbol . "+=" expr
   54         | symbol . "*=" expr

    "+="  shift, and go to state 51
    "*="  shift, and go to state 52
    '['   shift, and go to state 53
    '='   shift, and go to state 54

    arrayDeref  go to state 55


State 14

   77 complexOrSimpleStmt: forStmt .

    $default  reduce using rule 77 (complexOrSimpleStmt)


State 15

   74 simpleStmt: exprStmt .

    $default  reduce using rule 74 (simpleStmt)


State 16

   72 simpleStmt: breakStmt .

    $default  reduce using rule 72 (simpleStmt)


State 17

   73 simpleStmt: continueStmt .

    $default  reduce using rule 73 (simpleStmt)


State 18

   75 complexOrSimpleStmt: ifStmt .

    $default  reduce using rule 75 (complexOrSimpleStmt)


State 19

   76 complexOrSimpleStmt: whileStmt .

    $default  reduce using rule 76 (complexOrSimpleStmt)


State 20

   84 complexOrSimpleStmt: simpleStmt .

    $default  reduce using rule 84 (complexOrSimpleStmt)


State 21

    1 module: complexOrSimpleStmt .
    5 module2: complexOrSimpleStmt .

    INDEQ     reduce using rule 5 (module2)
    $default  reduce using rule 1 (module)


State 22

   43 forStmt: "for" symbol . "in" expr ".." expr $@1 colonBody

    "in"  shift, and go to state 56


State 23

   34 literal: INTLIT .

    $default  reduce using rule 34 (literal)


State 24

   35 literal: FLOATLIT .

    $default  reduce using rule 35 (literal)


State 25

   36 literal: STRLIT .

    $default  reduce using rule 36 (literal)


State 26

   37 literal: CHARLIT .

    $default  reduce using rule 37 (literal)


State 27

   33 literal: BOOLLIT .

    $default  reduce using rule 33 (literal)


State 28

   38 literal: "nil" .

    $default  reduce using rule 38 (literal)


State 29

   27 sExpr: "not" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 57
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 30

   25 sExpr: '-' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 58
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 31

   24 sExpr: '+' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 59
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 32

   26 sExpr: '$' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 60
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 33

   28 sExpr: '(' . sExpr ')'

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 61
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 34

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   44 expr: sExpr .

    "xor"  shift, and go to state 62
    "or"   shift, and go to state 63
    "and"  shift, and go to state 64
    "!="   shift, and go to state 65
    ">="   shift, and go to state 66
    "<="   shift, and go to state 67
    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '>'    shift, and go to state 71
    '<'    shift, and go to state 72
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 44 (expr)


State 35

   39 identOrLiteral: symbol .

    $default  reduce using rule 39 (identOrLiteral)


State 36

   40 identOrLiteral: literal .

    $default  reduce using rule 40 (identOrLiteral)


State 37

   47 primary: identOrLiteral .
   48        | identOrLiteral . arrayDeref

    '['  shift, and go to state 53

    $default  reduce using rule 47 (primary)

    arrayDeref  go to state 78


State 38

   57 ifStmt: "if" expr . colonBody elifCondStmt
   58       | "if" expr . colonBody elifCondStmt INDEQ "else" colonBody
   59       | "if" expr . colonBody
   60       | "if" expr . colonBody INDEQ "else" colonBody

    ':'  shift, and go to state 79

    colon      go to state 80
    colonBody  go to state 81


State 39

   29 sExpr: primary .

    $default  reduce using rule 29 (sExpr)


State 40

   69 secVariable: INDG . variable serVariable DED

    IDENT  shift, and go to state 1

    symbol    go to state 41
    variable  go to state 82


State 41

   66 variable: symbol . ':' typeDesc '=' expr
   67         | symbol . ':' typeDesc

    ':'  shift, and go to state 83


State 42

   68 secVariable: variable .

    $default  reduce using rule 68 (secVariable)


State 43

   79 complexOrSimpleStmt: "var" secVariable .

    $default  reduce using rule 79 (complexOrSimpleStmt)


State 44

   63 whileStmt: "while" expr . colonBody

    ':'  shift, and go to state 79

    colon      go to state 80
    colonBody  go to state 84


State 45

   31 echoexprList: echoexprList . comma expr
   78 complexOrSimpleStmt: "echo" echoexprList .

    ','  shift, and go to state 85

    $default  reduce using rule 78 (complexOrSimpleStmt)

    comma  go to state 86


State 46

   32 echoexprList: expr .

    $default  reduce using rule 32 (echoexprList)


State 47

   80 complexOrSimpleStmt: "readInt" symbol .
   81                    | "readInt" symbol . arrayDeref

    '['  shift, and go to state 53

    $default  reduce using rule 80 (complexOrSimpleStmt)

    arrayDeref  go to state 87


State 48

   82 complexOrSimpleStmt: "readFloat" symbol .
   83                    | "readFloat" symbol . arrayDeref

    '['  shift, and go to state 53

    $default  reduce using rule 82 (complexOrSimpleStmt)

    arrayDeref  go to state 88


State 49

    0 $accept: module $end .

    $default  accept


State 50

    2 module: module2 INDEQ . complexOrSimpleStmt
    4 module2: module2 INDEQ . complexOrSimpleStmt

    IDENT        shift, and go to state 1
    "break"      shift, and go to state 2
    "continue"   shift, and go to state 3
    "for"        shift, and go to state 4
    "if"         shift, and go to state 5
    "var"        shift, and go to state 6
    "while"      shift, and go to state 7
    "echo"       shift, and go to state 8
    "readInt"    shift, and go to state 9
    "readFloat"  shift, and go to state 10

    symbol               go to state 13
    forStmt              go to state 14
    exprStmt             go to state 15
    breakStmt            go to state 16
    continueStmt         go to state 17
    ifStmt               go to state 18
    whileStmt            go to state 19
    simpleStmt           go to state 20
    complexOrSimpleStmt  go to state 89


State 51

   53 exprStmt: symbol "+=" . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 90
    primary         go to state 39


State 52

   54 exprStmt: symbol "*=" . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 91
    primary         go to state 39


State 53

   46 arrayDeref: '[' . expr ']'

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 92
    primary         go to state 39


State 54

   51 exprStmt: symbol '=' . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 93
    primary         go to state 39


State 55

   45 arrayDeref: arrayDeref . '[' expr ']'
   52 exprStmt: symbol arrayDeref . '=' expr

    '['  shift, and go to state 94
    '='  shift, and go to state 95


State 56

   43 forStmt: "for" symbol "in" . expr ".." expr $@1 colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 96
    primary         go to state 39


State 57

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   27      | "not" sExpr .

    $default  reduce using rule 27 (sExpr)


State 58

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   25      | '-' sExpr .

    $default  reduce using rule 25 (sExpr)


State 59

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   24      | '+' sExpr .

    $default  reduce using rule 24 (sExpr)


State 60

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   26      | '$' sExpr .

    $default  reduce using rule 26 (sExpr)


State 61

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   28      | '(' sExpr . ')'

    "xor"  shift, and go to state 62
    "or"   shift, and go to state 63
    "and"  shift, and go to state 64
    "!="   shift, and go to state 65
    ">="   shift, and go to state 66
    "<="   shift, and go to state 67
    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '>'    shift, and go to state 71
    '<'    shift, and go to state 72
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77
    ')'    shift, and go to state 97


State 62

    8 sExpr: sExpr "xor" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 98
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 63

    9 sExpr: sExpr "or" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 99
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 64

   10 sExpr: sExpr "and" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 100
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 65

   11 sExpr: sExpr "!=" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 101
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 66

   13 sExpr: sExpr ">=" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 102
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 67

   15 sExpr: sExpr "<=" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 103
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 68

   16 sExpr: sExpr "==" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 104
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 69

   20 sExpr: sExpr "mod" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 105
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 70

   21 sExpr: sExpr "div" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 106
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 71

   12 sExpr: sExpr '>' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 107
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 72

   14 sExpr: sExpr '<' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 108
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 73

   17 sExpr: sExpr '-' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 109
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 74

   18 sExpr: sExpr '+' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 110
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 75

   19 sExpr: sExpr '%' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 111
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 76

   22 sExpr: sExpr '/' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 112
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 77

   23 sExpr: sExpr '*' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 113
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 78

   45 arrayDeref: arrayDeref . '[' expr ']'
   48 primary: identOrLiteral arrayDeref .

    '['  shift, and go to state 94

    $default  reduce using rule 48 (primary)


State 79

    7 colon: ':' .

    $default  reduce using rule 7 (colon)


State 80

   65 colonBody: colon . $@2 stmt

    $default  reduce using rule 64 ($@2)

    $@2  go to state 114


State 81

   57 ifStmt: "if" expr colonBody . elifCondStmt
   58       | "if" expr colonBody . elifCondStmt INDEQ "else" colonBody
   59       | "if" expr colonBody .
   60       | "if" expr colonBody . INDEQ "else" colonBody

    INDEQ  shift, and go to state 115

    $default  reduce using rule 59 (ifStmt)

    elifCondStmt  go to state 116


State 82

   69 secVariable: INDG variable . serVariable DED

    $default  reduce using rule 71 (serVariable)

    serVariable  go to state 117


State 83

   66 variable: symbol ':' . typeDesc '=' expr
   67         | symbol ':' . typeDesc

    IDENT    shift, and go to state 1
    "array"  shift, and go to state 118

    symbol     go to state 119
    arrayDecl  go to state 120
    typeDesc   go to state 121


State 84

   63 whileStmt: "while" expr colonBody .

    $default  reduce using rule 63 (whileStmt)


State 85

    6 comma: ',' .

    $default  reduce using rule 6 (comma)


State 86

   31 echoexprList: echoexprList comma . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 122
    primary         go to state 39


State 87

   45 arrayDeref: arrayDeref . '[' expr ']'
   81 complexOrSimpleStmt: "readInt" symbol arrayDeref .

    '['  shift, and go to state 94

    $default  reduce using rule 81 (complexOrSimpleStmt)


State 88

   45 arrayDeref: arrayDeref . '[' expr ']'
   83 complexOrSimpleStmt: "readFloat" symbol arrayDeref .

    '['  shift, and go to state 94

    $default  reduce using rule 83 (complexOrSimpleStmt)


State 89

    2 module: module2 INDEQ complexOrSimpleStmt .
    4 module2: module2 INDEQ complexOrSimpleStmt .

    INDEQ     reduce using rule 4 (module2)
    $default  reduce using rule 2 (module)


State 90

   53 exprStmt: symbol "+=" expr .

    $default  reduce using rule 53 (exprStmt)


State 91

   54 exprStmt: symbol "*=" expr .

    $default  reduce using rule 54 (exprStmt)


State 92

   46 arrayDeref: '[' expr . ']'

    ']'  shift, and go to state 123


State 93

   51 exprStmt: symbol '=' expr .

    $default  reduce using rule 51 (exprStmt)


State 94

   45 arrayDeref: arrayDeref '[' . expr ']'

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 124
    primary         go to state 39


State 95

   52 exprStmt: symbol arrayDeref '=' . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 125
    primary         go to state 39


State 96

   43 forStmt: "for" symbol "in" expr . ".." expr $@1 colonBody

    ".."  shift, and go to state 126


State 97

   28 sExpr: '(' sExpr ')' .

    $default  reduce using rule 28 (sExpr)


State 98

    8 sExpr: sExpr . "xor" sExpr
    8      | sExpr "xor" sExpr .
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "or"   shift, and go to state 63
    "and"  shift, and go to state 64
    "!="   shift, and go to state 65
    ">="   shift, and go to state 66
    "<="   shift, and go to state 67
    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '>'    shift, and go to state 71
    '<'    shift, and go to state 72
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 8 (sExpr)


State 99

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
    9      | sExpr "or" sExpr .
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "and"  shift, and go to state 64
    "!="   shift, and go to state 65
    ">="   shift, and go to state 66
    "<="   shift, and go to state 67
    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '>'    shift, and go to state 71
    '<'    shift, and go to state 72
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 9 (sExpr)


State 100

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   10      | sExpr "and" sExpr .
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "!="   shift, and go to state 65
    ">="   shift, and go to state 66
    "<="   shift, and go to state 67
    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '>'    shift, and go to state 71
    '<'    shift, and go to state 72
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 10 (sExpr)


State 101

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   11      | sExpr "!=" sExpr .
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    ">="   shift, and go to state 66
    "<="   shift, and go to state 67
    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '>'    shift, and go to state 71
    '<'    shift, and go to state 72
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 11 (sExpr)


State 102

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   13      | sExpr ">=" sExpr .
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "<="   shift, and go to state 67
    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '<'    shift, and go to state 72
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 13 (sExpr)


State 103

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   15      | sExpr "<=" sExpr .
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 15 (sExpr)


State 104

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   16      | sExpr "==" sExpr .
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 16 (sExpr)


State 105

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   20      | sExpr "mod" sExpr .
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "div"  shift, and go to state 70
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 20 (sExpr)


State 106

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   21      | sExpr "div" sExpr .
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    '/'  shift, and go to state 76
    '*'  shift, and go to state 77

    $default  reduce using rule 21 (sExpr)


State 107

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   12      | sExpr '>' sExpr .
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    ">="   shift, and go to state 66
    "<="   shift, and go to state 67
    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '<'    shift, and go to state 72
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 12 (sExpr)


State 108

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   14      | sExpr '<' sExpr .
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "<="   shift, and go to state 67
    "=="   shift, and go to state 68
    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '-'    shift, and go to state 73
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 14 (sExpr)


State 109

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   17      | sExpr '-' sExpr .
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '+'    shift, and go to state 74
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 17 (sExpr)


State 110

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   18      | sExpr '+' sExpr .
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '%'    shift, and go to state 75
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 18 (sExpr)


State 111

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   19      | sExpr '%' sExpr .
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 69
    "div"  shift, and go to state 70
    '/'    shift, and go to state 76
    '*'    shift, and go to state 77

    $default  reduce using rule 19 (sExpr)


State 112

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   22      | sExpr '/' sExpr .
   23      | sExpr . '*' sExpr

    '*'  shift, and go to state 77

    $default  reduce using rule 22 (sExpr)


State 113

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   23      | sExpr '*' sExpr .

    $default  reduce using rule 23 (sExpr)


State 114

   65 colonBody: colon $@2 . stmt

    IDENT       shift, and go to state 1
    INDG        shift, and go to state 127
    "break"     shift, and go to state 2
    "continue"  shift, and go to state 3

    symbol        go to state 13
    exprStmt      go to state 15
    breakStmt     go to state 16
    continueStmt  go to state 17
    simpleStmt    go to state 128
    stmt          go to state 129


State 115

   60 ifStmt: "if" expr colonBody INDEQ . "else" colonBody
   62 elifCondStmt: INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 130
    "else"  shift, and go to state 131


State 116

   57 ifStmt: "if" expr colonBody elifCondStmt .
   58       | "if" expr colonBody elifCondStmt . INDEQ "else" colonBody
   61 elifCondStmt: elifCondStmt . INDEQ "elif" expr colonBody

    INDEQ  shift, and go to state 132

    $default  reduce using rule 57 (ifStmt)


State 117

   69 secVariable: INDG variable serVariable . DED
   70 serVariable: serVariable . INDEQ variable

    INDEQ  shift, and go to state 133
    DED    shift, and go to state 134


State 118

   41 arrayDecl: "array" . '[' INTLIT comma typeDesc ']'

    '['  shift, and go to state 135


State 119

   49 typeDesc: symbol .

    $default  reduce using rule 49 (typeDesc)


State 120

   50 typeDesc: arrayDecl .

    $default  reduce using rule 50 (typeDesc)


State 121

   66 variable: symbol ':' typeDesc . '=' expr
   67         | symbol ':' typeDesc .

    '='  shift, and go to state 136

    $default  reduce using rule 67 (variable)


State 122

   31 echoexprList: echoexprList comma expr .

    $default  reduce using rule 31 (echoexprList)


State 123

   46 arrayDeref: '[' expr ']' .

    $default  reduce using rule 46 (arrayDeref)


State 124

   45 arrayDeref: arrayDeref '[' expr . ']'

    ']'  shift, and go to state 137


State 125

   52 exprStmt: symbol arrayDeref '=' expr .

    $default  reduce using rule 52 (exprStmt)


State 126

   43 forStmt: "for" symbol "in" expr ".." . expr $@1 colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 138
    primary         go to state 39


State 127

   86 stmt: INDG . stmt2 complexOrSimpleStmt DED

    $default  reduce using rule 88 (stmt2)

    stmt2  go to state 139


State 128

   85 stmt: simpleStmt .

    $default  reduce using rule 85 (stmt)


State 129

   65 colonBody: colon $@2 stmt .

    $default  reduce using rule 65 (colonBody)


State 130

   62 elifCondStmt: INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 140
    primary         go to state 39


State 131

   60 ifStmt: "if" expr colonBody INDEQ "else" . colonBody

    ':'  shift, and go to state 79

    colon      go to state 80
    colonBody  go to state 141


State 132

   58 ifStmt: "if" expr colonBody elifCondStmt INDEQ . "else" colonBody
   61 elifCondStmt: elifCondStmt INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 142
    "else"  shift, and go to state 143


State 133

   70 serVariable: serVariable INDEQ . variable

    IDENT  shift, and go to state 1

    symbol    go to state 41
    variable  go to state 144


State 134

   69 secVariable: INDG variable serVariable DED .

    $default  reduce using rule 69 (secVariable)


State 135

   41 arrayDecl: "array" '[' . INTLIT comma typeDesc ']'

    INTLIT  shift, and go to state 145


State 136

   66 variable: symbol ':' typeDesc '=' . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 146
    primary         go to state 39


State 137

   45 arrayDeref: arrayDeref '[' expr ']' .

    $default  reduce using rule 45 (arrayDeref)


State 138

   43 forStmt: "for" symbol "in" expr ".." expr . $@1 colonBody

    $default  reduce using rule 42 ($@1)

    $@1  go to state 147


State 139

   86 stmt: INDG stmt2 . complexOrSimpleStmt DED
   87 stmt2: stmt2 . complexOrSimpleStmt INDEQ

    IDENT        shift, and go to state 1
    "break"      shift, and go to state 2
    "continue"   shift, and go to state 3
    "for"        shift, and go to state 4
    "if"         shift, and go to state 5
    "var"        shift, and go to state 6
    "while"      shift, and go to state 7
    "echo"       shift, and go to state 8
    "readInt"    shift, and go to state 9
    "readFloat"  shift, and go to state 10

    symbol               go to state 13
    forStmt              go to state 14
    exprStmt             go to state 15
    breakStmt            go to state 16
    continueStmt         go to state 17
    ifStmt               go to state 18
    whileStmt            go to state 19
    simpleStmt           go to state 20
    complexOrSimpleStmt  go to state 148


State 140

   62 elifCondStmt: INDEQ "elif" expr . colonBody

    ':'  shift, and go to state 79

    colon      go to state 80
    colonBody  go to state 149


State 141

   60 ifStmt: "if" expr colonBody INDEQ "else" colonBody .

    $default  reduce using rule 60 (ifStmt)


State 142

   61 elifCondStmt: elifCondStmt INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 150
    primary         go to state 39


State 143

   58 ifStmt: "if" expr colonBody elifCondStmt INDEQ "else" . colonBody

    ':'  shift, and go to state 79

    colon      go to state 80
    colonBody  go to state 151


State 144

   70 serVariable: serVariable INDEQ variable .

    $default  reduce using rule 70 (serVariable)


State 145

   41 arrayDecl: "array" '[' INTLIT . comma typeDesc ']'

    ','  shift, and go to state 85

    comma  go to state 152


State 146

   66 variable: symbol ':' typeDesc '=' expr .

    $default  reduce using rule 66 (variable)


State 147

   43 forStmt: "for" symbol "in" expr ".." expr $@1 . colonBody

    ':'  shift, and go to state 79

    colon      go to state 80
    colonBody  go to state 153


State 148

   86 stmt: INDG stmt2 complexOrSimpleStmt . DED
   87 stmt2: stmt2 complexOrSimpleStmt . INDEQ

    INDEQ  shift, and go to state 154
    DED    shift, and go to state 155


State 149

   62 elifCondStmt: INDEQ "elif" expr colonBody .

    $default  reduce using rule 62 (elifCondStmt)


State 150

   61 elifCondStmt: elifCondStmt INDEQ "elif" expr . colonBody

    ':'  shift, and go to state 79

    colon      go to state 80
    colonBody  go to state 156


State 151

   58 ifStmt: "if" expr colonBody elifCondStmt INDEQ "else" colonBody .

    $default  reduce using rule 58 (ifStmt)


State 152

   41 arrayDecl: "array" '[' INTLIT comma . typeDesc ']'

    IDENT    shift, and go to state 1
    "array"  shift, and go to state 118

    symbol     go to state 119
    arrayDecl  go to state 120
    typeDesc   go to state 157


State 153

   43 forStmt: "for" symbol "in" expr ".." expr $@1 colonBody .

    $default  reduce using rule 43 (forStmt)


State 154

   87 stmt2: stmt2 complexOrSimpleStmt INDEQ .

    $default  reduce using rule 87 (stmt2)


State 155

   86 stmt: INDG stmt2 complexOrSimpleStmt DED .

    $default  reduce using rule 86 (stmt)


State 156

   61 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody .

    $default  reduce using rule 61 (elifCondStmt)


State 157

   41 arrayDecl: "array" '[' INTLIT comma typeDesc . ']'

    ']'  shift, and go to state 158


State 158

   41 arrayDecl: "array" '[' INTLIT comma typeDesc ']' .

    $default  reduce using rule 41 (arrayDecl)
