Nonterminals useless in grammar

   symbolCommaNoHang


Terminals unused in grammar

   ELSEX


Rules useless in grammar

  121 symbolCommaNoHang: symbolCommaNoHang comma symbol
  122                  | symbol comma symbol


State 67 conflicts: 1 shift/reduce


Grammar

    0 $accept: module $end

    1 module: complexOrSimpleStmt
    2       | module2 INDEQ complexOrSimpleStmt
    3       | %empty

    4 module2: module2 INDEQ complexOrSimpleStmt
    5        | complexOrSimpleStmt

    6 comma: ','

    7 colon: ':'

    8 sExpr: sExpr "xor" sExpr
    9      | sExpr "or" sExpr
   10      | sExpr "and" sExpr
   11      | sExpr "!=" sExpr
   12      | sExpr '>' sExpr
   13      | sExpr ">=" sExpr
   14      | sExpr '<' sExpr
   15      | sExpr "<=" sExpr
   16      | sExpr "==" sExpr
   17      | sExpr '-' sExpr
   18      | sExpr '+' sExpr
   19      | sExpr '%' sExpr
   20      | sExpr "mod" sExpr
   21      | sExpr "div" sExpr
   22      | sExpr '/' sExpr
   23      | sExpr '*' sExpr
   24      | '+' sExpr
   25      | '-' sExpr
   26      | '$' sExpr
   27      | "not" sExpr
   28      | '(' sExpr ')'
   29      | primary

   30 symbol: IDENT

   31 exprList: expr comma exprList
   32         | expr

   33 literal: BOOLLIT
   34        | INTLIT
   35        | FLOATLIT
   36        | STRLIT
   37        | CHARLIT
   38        | "nil"

   39 identOrLiteral: symbol
   40               | literal
   41               | arrayConstr
   42               | tupleConstr

   43 tupleConstr: '(' exprList ')'

   44 arrayConstr: '[' exprList ']'

   45 primarySuffix: '(' exprList ')'
   46              | '(' ')'
   47              | '.' symbol

   48 ifExpr: "if" condExpr

   49 condExpr: expr colon expr elifCondExpr

   50 elifCondExpr: "elif" expr colon expr elifCondExpr
   51             | "else" colon expr

   52 declColon: symbol ':' typeDesc

   53 inlTupleDecl: "tuple" '[' declColonCommaNoHang ']'

   54 arrayDecl: "array" '[' INTLIT comma typeDesc ']'

   55 paramList: '(' declColonCommaNoHang ')'
   56          | '(' ')'

   57 declColonCommaNoHang: declColon comma declColonCommaNoHang
   58                     | declColon

   59 paramListColon: paramList ':' typeDesc
   60               | ':' typeDesc
   61               | %empty

   62 $@1: %empty

   63 $@2: %empty

   64 forStmt: "for" $@1 symbol $@2 "in" expr ".." expr colonBody

   65 expr: ifExpr
   66     | sExpr

   67 arrayDeref: arrayDeref '[' expr ']'
   68           | '[' expr ']'

   69 primary: identOrLiteral primary2
   70        | identOrLiteral
   71        | identOrLiteral arrayDeref

   72 primary2: primary2 primarySuffix
   73         | primarySuffix

   74 typeDesc: symbol
   75         | inlTupleDecl
   76         | arrayDecl

   77 exprStmt: sExpr
   78         | symbol '=' expr
   79         | symbol "+=" expr
   80         | symbol "*=" expr

   81 returnStmt: "return" expr
   82           | "return"

   83 breakStmt: "break"

   84 continueStmt: "continue"

   85 ifStmt: "if" expr colonBody INDEQ elifCondStmt
   86       | "if" expr colonBody INDEQ elifCondStmt "else" colonBody
   87       | "if" expr colonBody
   88       | "if" expr colonBody INDEQ "else" colonBody

   89 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody
   90             | INDEQ "elif" expr colonBody

   91 whileStmt: "while" expr colonBody

   92 routine: symbol paramListColon '=' stmt
   93        | symbol paramListColon

   94 typeDef: symbol '=' typeDesc

   95 $@3: %empty

   96 colonBody: colon $@3 stmt

   97 variable: symbol ':' typeDesc '=' expr
   98         | symbol ':' typeDesc

   99 secVariable: variable
  100            | INDG variable serVariable DED

  101 serVariable: INDEQ variable serVariable
  102            | %empty

  103 simpleStmt: returnStmt
  104           | breakStmt
  105           | continueStmt
  106           | exprStmt

  107 complexOrSimpleStmt: ifStmt
  108                    | whileStmt
  109                    | forStmt
  110                    | "echo" expr
  111                    | "proc" routine
  112                    | "type" typeDef
  113                    | "var" secVariable
  114                    | "readInt" symbol
  115                    | "readFloat" symbol
  116                    | simpleStmt

  117 stmt: simpleStmt
  118     | INDG stmt2 complexOrSimpleStmt DED

  119 stmt2: stmt2 complexOrSimpleStmt INDEQ
  120      | %empty


Terminals, with rules where they appear

$end (0) 0
'$' (36) 26
'%' (37) 19
'(' (40) 28 43 45 46 55 56
')' (41) 28 43 45 46 55 56
'*' (42) 23
'+' (43) 18 24
',' (44) 6
'-' (45) 17 25
'.' (46) 47
'/' (47) 22
':' (58) 7 52 59 60 97 98
'<' (60) 14
'=' (61) 78 92 94 97
'>' (62) 12
'[' (91) 44 53 54 67 68
']' (93) 44 53 54 67 68
error (256)
INTLIT (258) 34 54
FLOATLIT (259) 35
STRLIT (260) 36
CHARLIT (261) 37
BOOLLIT (262) 33
IDENT (263) 30
INDG (264) 100 118
INDEQ (265) 2 4 85 86 88 89 90 101 119
DED (266) 100 118
"break" (267) 83
"continue" (268) 84
"elif" (269) 50 89 90
"else" (270) 51 86 88
"for" (271) 64
"if" (272) 48 85 86 87 88
"in" (273) 64
"nil" (274) 38
"proc" (275) 111
"return" (276) 81 82
"tuple" (277) 53
"type" (278) 112
"var" (279) 113
"while" (280) 91
"echo" (281) 110
"array" (282) 54
"readInt" (283) 114
"readFloat" (284) 115
IFX (285)
ELSEX (286)
"xor" (287) 8
"or" (288) 9
"and" (289) 10
"!=" (290) 11
">=" (291) 13
"<=" (292) 15
"==" (293) 16
".." (294) 64
"mod" (295) 20
"div" (296) 21
"not" (297) 27
"+=" (298) 79
"*=" (299) 80
UPLUS (300)
UMINUS (301)
LPAREN (302)


Nonterminals, with rules where they appear

$accept (64)
    on left: 0
module (65)
    on left: 1 2 3, on right: 0
module2 (66)
    on left: 4 5, on right: 2 4
comma (67)
    on left: 6, on right: 31 54 57
colon (68)
    on left: 7, on right: 49 50 51 96
sExpr (69)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28 29, on right: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28 66 77
symbol (70)
    on left: 30, on right: 39 47 52 64 74 78 79 80 92 93 94 97 98 114
    115
exprList (71)
    on left: 31 32, on right: 31 43 44 45
literal (72)
    on left: 33 34 35 36 37 38, on right: 40
identOrLiteral (73)
    on left: 39 40 41 42, on right: 69 70 71
tupleConstr (74)
    on left: 43, on right: 42
arrayConstr (75)
    on left: 44, on right: 41
primarySuffix (76)
    on left: 45 46 47, on right: 72 73
ifExpr (77)
    on left: 48, on right: 65
condExpr (78)
    on left: 49, on right: 48
elifCondExpr (79)
    on left: 50 51, on right: 49 50
declColon (80)
    on left: 52, on right: 57 58
inlTupleDecl (81)
    on left: 53, on right: 75
arrayDecl (82)
    on left: 54, on right: 76
paramList (83)
    on left: 55 56, on right: 59
declColonCommaNoHang (84)
    on left: 57 58, on right: 53 55 57
paramListColon (85)
    on left: 59 60 61, on right: 92 93
forStmt (86)
    on left: 64, on right: 109
$@1 (87)
    on left: 62, on right: 64
$@2 (88)
    on left: 63, on right: 64
expr (89)
    on left: 65 66, on right: 31 32 49 50 51 64 67 68 78 79 80 81 85
    86 87 88 89 90 91 97 110
arrayDeref (90)
    on left: 67 68, on right: 67 71
primary (91)
    on left: 69 70 71, on right: 29
primary2 (92)
    on left: 72 73, on right: 69 72
typeDesc (93)
    on left: 74 75 76, on right: 52 54 59 60 94 97 98
exprStmt (94)
    on left: 77 78 79 80, on right: 106
returnStmt (95)
    on left: 81 82, on right: 103
breakStmt (96)
    on left: 83, on right: 104
continueStmt (97)
    on left: 84, on right: 105
ifStmt (98)
    on left: 85 86 87 88, on right: 107
elifCondStmt (99)
    on left: 89 90, on right: 85 86 89
whileStmt (100)
    on left: 91, on right: 108
routine (101)
    on left: 92 93, on right: 111
typeDef (102)
    on left: 94, on right: 112
colonBody (103)
    on left: 96, on right: 64 85 86 87 88 89 90 91
$@3 (104)
    on left: 95, on right: 96
variable (105)
    on left: 97 98, on right: 99 100 101
secVariable (106)
    on left: 99 100, on right: 113
serVariable (107)
    on left: 101 102, on right: 100 101
simpleStmt (108)
    on left: 103 104 105 106, on right: 116 117
complexOrSimpleStmt (109)
    on left: 107 108 109 110 111 112 113 114 115 116, on right: 1 2
    4 5 118 119
stmt (110)
    on left: 117 118, on right: 92 96
stmt2 (111)
    on left: 119 120, on right: 118 119


State 0

    0 $accept: . module $end

    INTLIT       shift, and go to state 1
    FLOATLIT     shift, and go to state 2
    STRLIT       shift, and go to state 3
    CHARLIT      shift, and go to state 4
    BOOLLIT      shift, and go to state 5
    IDENT        shift, and go to state 6
    "break"      shift, and go to state 7
    "continue"   shift, and go to state 8
    "for"        shift, and go to state 9
    "if"         shift, and go to state 10
    "nil"        shift, and go to state 11
    "proc"       shift, and go to state 12
    "return"     shift, and go to state 13
    "type"       shift, and go to state 14
    "var"        shift, and go to state 15
    "while"      shift, and go to state 16
    "echo"       shift, and go to state 17
    "readInt"    shift, and go to state 18
    "readFloat"  shift, and go to state 19
    "not"        shift, and go to state 20
    '-'          shift, and go to state 21
    '+'          shift, and go to state 22
    '$'          shift, and go to state 23
    '('          shift, and go to state 24
    '['          shift, and go to state 25

    $default  reduce using rule 3 (module)

    module               go to state 26
    module2              go to state 27
    sExpr                go to state 28
    symbol               go to state 29
    literal              go to state 30
    identOrLiteral       go to state 31
    tupleConstr          go to state 32
    arrayConstr          go to state 33
    forStmt              go to state 34
    primary              go to state 35
    exprStmt             go to state 36
    returnStmt           go to state 37
    breakStmt            go to state 38
    continueStmt         go to state 39
    ifStmt               go to state 40
    whileStmt            go to state 41
    simpleStmt           go to state 42
    complexOrSimpleStmt  go to state 43


State 1

   34 literal: INTLIT .

    $default  reduce using rule 34 (literal)


State 2

   35 literal: FLOATLIT .

    $default  reduce using rule 35 (literal)


State 3

   36 literal: STRLIT .

    $default  reduce using rule 36 (literal)


State 4

   37 literal: CHARLIT .

    $default  reduce using rule 37 (literal)


State 5

   33 literal: BOOLLIT .

    $default  reduce using rule 33 (literal)


State 6

   30 symbol: IDENT .

    $default  reduce using rule 30 (symbol)


State 7

   83 breakStmt: "break" .

    $default  reduce using rule 83 (breakStmt)


State 8

   84 continueStmt: "continue" .

    $default  reduce using rule 84 (continueStmt)


State 9

   64 forStmt: "for" . $@1 symbol $@2 "in" expr ".." expr colonBody

    $default  reduce using rule 62 ($@1)

    $@1  go to state 44


State 10

   85 ifStmt: "if" . expr colonBody INDEQ elifCondStmt
   86       | "if" . expr colonBody INDEQ elifCondStmt "else" colonBody
   87       | "if" . expr colonBody
   88       | "if" . expr colonBody INDEQ "else" colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 49
    primary         go to state 35


State 11

   38 literal: "nil" .

    $default  reduce using rule 38 (literal)


State 12

  111 complexOrSimpleStmt: "proc" . routine

    IDENT  shift, and go to state 6

    symbol   go to state 50
    routine  go to state 51


State 13

   81 returnStmt: "return" . expr
   82           | "return" .

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    $default  reduce using rule 82 (returnStmt)

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 52
    primary         go to state 35


State 14

  112 complexOrSimpleStmt: "type" . typeDef

    IDENT  shift, and go to state 6

    symbol   go to state 53
    typeDef  go to state 54


State 15

  113 complexOrSimpleStmt: "var" . secVariable

    IDENT  shift, and go to state 6
    INDG   shift, and go to state 55

    symbol       go to state 56
    variable     go to state 57
    secVariable  go to state 58


State 16

   91 whileStmt: "while" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 59
    primary         go to state 35


State 17

  110 complexOrSimpleStmt: "echo" . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 60
    primary         go to state 35


State 18

  114 complexOrSimpleStmt: "readInt" . symbol

    IDENT  shift, and go to state 6

    symbol  go to state 61


State 19

  115 complexOrSimpleStmt: "readFloat" . symbol

    IDENT  shift, and go to state 6

    symbol  go to state 62


State 20

   27 sExpr: "not" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 63
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 21

   25 sExpr: '-' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 64
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 22

   24 sExpr: '+' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 65
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 23

   26 sExpr: '$' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 66
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 24

   28 sExpr: '(' . sExpr ')'
   43 tupleConstr: '(' . exprList ')'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 67
    symbol          go to state 47
    exprList        go to state 68
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 69
    primary         go to state 35


State 25

   44 arrayConstr: '[' . exprList ']'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    exprList        go to state 70
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 69
    primary         go to state 35


State 26

    0 $accept: module . $end

    $end  shift, and go to state 71


State 27

    2 module: module2 . INDEQ complexOrSimpleStmt
    4 module2: module2 . INDEQ complexOrSimpleStmt

    INDEQ  shift, and go to state 72


State 28

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   77 exprStmt: sExpr .

    "xor"  shift, and go to state 73
    "or"   shift, and go to state 74
    "and"  shift, and go to state 75
    "!="   shift, and go to state 76
    ">="   shift, and go to state 77
    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '>'    shift, and go to state 82
    '<'    shift, and go to state 83
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 77 (exprStmt)


State 29

   39 identOrLiteral: symbol .
   78 exprStmt: symbol . '=' expr
   79         | symbol . "+=" expr
   80         | symbol . "*=" expr

    "+="  shift, and go to state 89
    "*="  shift, and go to state 90
    '='   shift, and go to state 91

    $default  reduce using rule 39 (identOrLiteral)


State 30

   40 identOrLiteral: literal .

    $default  reduce using rule 40 (identOrLiteral)


State 31

   69 primary: identOrLiteral . primary2
   70        | identOrLiteral .
   71        | identOrLiteral . arrayDeref

    '('  shift, and go to state 92
    '['  shift, and go to state 93
    '.'  shift, and go to state 94

    $default  reduce using rule 70 (primary)

    primarySuffix  go to state 95
    arrayDeref     go to state 96
    primary2       go to state 97


State 32

   42 identOrLiteral: tupleConstr .

    $default  reduce using rule 42 (identOrLiteral)


State 33

   41 identOrLiteral: arrayConstr .

    $default  reduce using rule 41 (identOrLiteral)


State 34

  109 complexOrSimpleStmt: forStmt .

    $default  reduce using rule 109 (complexOrSimpleStmt)


State 35

   29 sExpr: primary .

    $default  reduce using rule 29 (sExpr)


State 36

  106 simpleStmt: exprStmt .

    $default  reduce using rule 106 (simpleStmt)


State 37

  103 simpleStmt: returnStmt .

    $default  reduce using rule 103 (simpleStmt)


State 38

  104 simpleStmt: breakStmt .

    $default  reduce using rule 104 (simpleStmt)


State 39

  105 simpleStmt: continueStmt .

    $default  reduce using rule 105 (simpleStmt)


State 40

  107 complexOrSimpleStmt: ifStmt .

    $default  reduce using rule 107 (complexOrSimpleStmt)


State 41

  108 complexOrSimpleStmt: whileStmt .

    $default  reduce using rule 108 (complexOrSimpleStmt)


State 42

  116 complexOrSimpleStmt: simpleStmt .

    $default  reduce using rule 116 (complexOrSimpleStmt)


State 43

    1 module: complexOrSimpleStmt .
    5 module2: complexOrSimpleStmt .

    INDEQ     reduce using rule 5 (module2)
    $default  reduce using rule 1 (module)


State 44

   64 forStmt: "for" $@1 . symbol $@2 "in" expr ".." expr colonBody

    IDENT  shift, and go to state 6

    symbol  go to state 98


State 45

   48 ifExpr: "if" . condExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    condExpr        go to state 99
    expr            go to state 100
    primary         go to state 35


State 46

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   66 expr: sExpr .

    "xor"  shift, and go to state 73
    "or"   shift, and go to state 74
    "and"  shift, and go to state 75
    "!="   shift, and go to state 76
    ">="   shift, and go to state 77
    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '>'    shift, and go to state 82
    '<'    shift, and go to state 83
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 66 (expr)


State 47

   39 identOrLiteral: symbol .

    $default  reduce using rule 39 (identOrLiteral)


State 48

   65 expr: ifExpr .

    $default  reduce using rule 65 (expr)


State 49

   85 ifStmt: "if" expr . colonBody INDEQ elifCondStmt
   86       | "if" expr . colonBody INDEQ elifCondStmt "else" colonBody
   87       | "if" expr . colonBody
   88       | "if" expr . colonBody INDEQ "else" colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 103


State 50

   92 routine: symbol . paramListColon '=' stmt
   93        | symbol . paramListColon

    ':'  shift, and go to state 104
    '('  shift, and go to state 105

    $default  reduce using rule 61 (paramListColon)

    paramList       go to state 106
    paramListColon  go to state 107


State 51

  111 complexOrSimpleStmt: "proc" routine .

    $default  reduce using rule 111 (complexOrSimpleStmt)


State 52

   81 returnStmt: "return" expr .

    $default  reduce using rule 81 (returnStmt)


State 53

   94 typeDef: symbol . '=' typeDesc

    '='  shift, and go to state 108


State 54

  112 complexOrSimpleStmt: "type" typeDef .

    $default  reduce using rule 112 (complexOrSimpleStmt)


State 55

  100 secVariable: INDG . variable serVariable DED

    IDENT  shift, and go to state 6

    symbol    go to state 56
    variable  go to state 109


State 56

   97 variable: symbol . ':' typeDesc '=' expr
   98         | symbol . ':' typeDesc

    ':'  shift, and go to state 110


State 57

   99 secVariable: variable .

    $default  reduce using rule 99 (secVariable)


State 58

  113 complexOrSimpleStmt: "var" secVariable .

    $default  reduce using rule 113 (complexOrSimpleStmt)


State 59

   91 whileStmt: "while" expr . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 111


State 60

  110 complexOrSimpleStmt: "echo" expr .

    $default  reduce using rule 110 (complexOrSimpleStmt)


State 61

  114 complexOrSimpleStmt: "readInt" symbol .

    $default  reduce using rule 114 (complexOrSimpleStmt)


State 62

  115 complexOrSimpleStmt: "readFloat" symbol .

    $default  reduce using rule 115 (complexOrSimpleStmt)


State 63

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   27      | "not" sExpr .

    $default  reduce using rule 27 (sExpr)


State 64

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   25      | '-' sExpr .

    $default  reduce using rule 25 (sExpr)


State 65

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   24      | '+' sExpr .

    $default  reduce using rule 24 (sExpr)


State 66

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   26      | '$' sExpr .

    $default  reduce using rule 26 (sExpr)


State 67

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   28      | '(' sExpr . ')'
   66 expr: sExpr .

    "xor"  shift, and go to state 73
    "or"   shift, and go to state 74
    "and"  shift, and go to state 75
    "!="   shift, and go to state 76
    ">="   shift, and go to state 77
    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '>'    shift, and go to state 82
    '<'    shift, and go to state 83
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88
    ')'    shift, and go to state 112

    ')'       [reduce using rule 66 (expr)]
    $default  reduce using rule 66 (expr)


State 68

   43 tupleConstr: '(' exprList . ')'

    ')'  shift, and go to state 113


State 69

   31 exprList: expr . comma exprList
   32         | expr .

    ','  shift, and go to state 114

    $default  reduce using rule 32 (exprList)

    comma  go to state 115


State 70

   44 arrayConstr: '[' exprList . ']'

    ']'  shift, and go to state 116


State 71

    0 $accept: module $end .

    $default  accept


State 72

    2 module: module2 INDEQ . complexOrSimpleStmt
    4 module2: module2 INDEQ . complexOrSimpleStmt

    INTLIT       shift, and go to state 1
    FLOATLIT     shift, and go to state 2
    STRLIT       shift, and go to state 3
    CHARLIT      shift, and go to state 4
    BOOLLIT      shift, and go to state 5
    IDENT        shift, and go to state 6
    "break"      shift, and go to state 7
    "continue"   shift, and go to state 8
    "for"        shift, and go to state 9
    "if"         shift, and go to state 10
    "nil"        shift, and go to state 11
    "proc"       shift, and go to state 12
    "return"     shift, and go to state 13
    "type"       shift, and go to state 14
    "var"        shift, and go to state 15
    "while"      shift, and go to state 16
    "echo"       shift, and go to state 17
    "readInt"    shift, and go to state 18
    "readFloat"  shift, and go to state 19
    "not"        shift, and go to state 20
    '-'          shift, and go to state 21
    '+'          shift, and go to state 22
    '$'          shift, and go to state 23
    '('          shift, and go to state 24
    '['          shift, and go to state 25

    sExpr                go to state 28
    symbol               go to state 29
    literal              go to state 30
    identOrLiteral       go to state 31
    tupleConstr          go to state 32
    arrayConstr          go to state 33
    forStmt              go to state 34
    primary              go to state 35
    exprStmt             go to state 36
    returnStmt           go to state 37
    breakStmt            go to state 38
    continueStmt         go to state 39
    ifStmt               go to state 40
    whileStmt            go to state 41
    simpleStmt           go to state 42
    complexOrSimpleStmt  go to state 117


State 73

    8 sExpr: sExpr "xor" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 118
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 74

    9 sExpr: sExpr "or" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 119
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 75

   10 sExpr: sExpr "and" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 120
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 76

   11 sExpr: sExpr "!=" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 121
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 77

   13 sExpr: sExpr ">=" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 122
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 78

   15 sExpr: sExpr "<=" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 123
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 79

   16 sExpr: sExpr "==" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 124
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 80

   20 sExpr: sExpr "mod" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 125
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 81

   21 sExpr: sExpr "div" . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 126
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 82

   12 sExpr: sExpr '>' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 127
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 83

   14 sExpr: sExpr '<' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 128
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 84

   17 sExpr: sExpr '-' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 129
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 85

   18 sExpr: sExpr '+' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 130
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 86

   19 sExpr: sExpr '%' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 131
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 87

   22 sExpr: sExpr '/' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 132
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 88

   23 sExpr: sExpr '*' . sExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 133
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35


State 89

   79 exprStmt: symbol "+=" . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 134
    primary         go to state 35


State 90

   80 exprStmt: symbol "*=" . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 135
    primary         go to state 35


State 91

   78 exprStmt: symbol '=' . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 136
    primary         go to state 35


State 92

   45 primarySuffix: '(' . exprList ')'
   46              | '(' . ')'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    ')'       shift, and go to state 137
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    exprList        go to state 138
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 69
    primary         go to state 35


State 93

   68 arrayDeref: '[' . expr ']'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 139
    primary         go to state 35


State 94

   47 primarySuffix: '.' . symbol

    IDENT  shift, and go to state 6

    symbol  go to state 140


State 95

   73 primary2: primarySuffix .

    $default  reduce using rule 73 (primary2)


State 96

   67 arrayDeref: arrayDeref . '[' expr ']'
   71 primary: identOrLiteral arrayDeref .

    '['  shift, and go to state 141

    $default  reduce using rule 71 (primary)


State 97

   69 primary: identOrLiteral primary2 .
   72 primary2: primary2 . primarySuffix

    '('  shift, and go to state 92
    '.'  shift, and go to state 94

    $default  reduce using rule 69 (primary)

    primarySuffix  go to state 142


State 98

   64 forStmt: "for" $@1 symbol . $@2 "in" expr ".." expr colonBody

    $default  reduce using rule 63 ($@2)

    $@2  go to state 143


State 99

   48 ifExpr: "if" condExpr .

    $default  reduce using rule 48 (ifExpr)


State 100

   49 condExpr: expr . colon expr elifCondExpr

    ':'  shift, and go to state 101

    colon  go to state 144


State 101

    7 colon: ':' .

    $default  reduce using rule 7 (colon)


State 102

   96 colonBody: colon . $@3 stmt

    $default  reduce using rule 95 ($@3)

    $@3  go to state 145


State 103

   85 ifStmt: "if" expr colonBody . INDEQ elifCondStmt
   86       | "if" expr colonBody . INDEQ elifCondStmt "else" colonBody
   87       | "if" expr colonBody .
   88       | "if" expr colonBody . INDEQ "else" colonBody

    INDEQ  shift, and go to state 146

    $default  reduce using rule 87 (ifStmt)


State 104

   60 paramListColon: ':' . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 147
    "array"  shift, and go to state 148

    symbol        go to state 149
    inlTupleDecl  go to state 150
    arrayDecl     go to state 151
    typeDesc      go to state 152


State 105

   55 paramList: '(' . declColonCommaNoHang ')'
   56          | '(' . ')'

    IDENT  shift, and go to state 6
    ')'    shift, and go to state 153

    symbol                go to state 154
    declColon             go to state 155
    declColonCommaNoHang  go to state 156


State 106

   59 paramListColon: paramList . ':' typeDesc

    ':'  shift, and go to state 157


State 107

   92 routine: symbol paramListColon . '=' stmt
   93        | symbol paramListColon .

    '='  shift, and go to state 158

    $default  reduce using rule 93 (routine)


State 108

   94 typeDef: symbol '=' . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 147
    "array"  shift, and go to state 148

    symbol        go to state 149
    inlTupleDecl  go to state 150
    arrayDecl     go to state 151
    typeDesc      go to state 159


State 109

  100 secVariable: INDG variable . serVariable DED

    INDEQ  shift, and go to state 160

    $default  reduce using rule 102 (serVariable)

    serVariable  go to state 161


State 110

   97 variable: symbol ':' . typeDesc '=' expr
   98         | symbol ':' . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 147
    "array"  shift, and go to state 148

    symbol        go to state 149
    inlTupleDecl  go to state 150
    arrayDecl     go to state 151
    typeDesc      go to state 162


State 111

   91 whileStmt: "while" expr colonBody .

    $default  reduce using rule 91 (whileStmt)


State 112

   28 sExpr: '(' sExpr ')' .

    $default  reduce using rule 28 (sExpr)


State 113

   43 tupleConstr: '(' exprList ')' .

    $default  reduce using rule 43 (tupleConstr)


State 114

    6 comma: ',' .

    $default  reduce using rule 6 (comma)


State 115

   31 exprList: expr comma . exprList

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    exprList        go to state 163
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 69
    primary         go to state 35


State 116

   44 arrayConstr: '[' exprList ']' .

    $default  reduce using rule 44 (arrayConstr)


State 117

    2 module: module2 INDEQ complexOrSimpleStmt .
    4 module2: module2 INDEQ complexOrSimpleStmt .

    INDEQ     reduce using rule 4 (module2)
    $default  reduce using rule 2 (module)


State 118

    8 sExpr: sExpr . "xor" sExpr
    8      | sExpr "xor" sExpr .
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "or"   shift, and go to state 74
    "and"  shift, and go to state 75
    "!="   shift, and go to state 76
    ">="   shift, and go to state 77
    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '>'    shift, and go to state 82
    '<'    shift, and go to state 83
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 8 (sExpr)


State 119

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
    9      | sExpr "or" sExpr .
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "and"  shift, and go to state 75
    "!="   shift, and go to state 76
    ">="   shift, and go to state 77
    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '>'    shift, and go to state 82
    '<'    shift, and go to state 83
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 9 (sExpr)


State 120

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   10      | sExpr "and" sExpr .
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "!="   shift, and go to state 76
    ">="   shift, and go to state 77
    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '>'    shift, and go to state 82
    '<'    shift, and go to state 83
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 10 (sExpr)


State 121

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   11      | sExpr "!=" sExpr .
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    ">="   shift, and go to state 77
    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '>'    shift, and go to state 82
    '<'    shift, and go to state 83
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 11 (sExpr)


State 122

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   13      | sExpr ">=" sExpr .
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '<'    shift, and go to state 83
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 13 (sExpr)


State 123

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   15      | sExpr "<=" sExpr .
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 15 (sExpr)


State 124

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   16      | sExpr "==" sExpr .
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 16 (sExpr)


State 125

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   20      | sExpr "mod" sExpr .
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "div"  shift, and go to state 81
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 20 (sExpr)


State 126

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   21      | sExpr "div" sExpr .
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    '/'  shift, and go to state 87
    '*'  shift, and go to state 88

    $default  reduce using rule 21 (sExpr)


State 127

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   12      | sExpr '>' sExpr .
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    ">="   shift, and go to state 77
    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '<'    shift, and go to state 83
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 12 (sExpr)


State 128

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   14      | sExpr '<' sExpr .
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "<="   shift, and go to state 78
    "=="   shift, and go to state 79
    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '-'    shift, and go to state 84
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 14 (sExpr)


State 129

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   17      | sExpr '-' sExpr .
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '+'    shift, and go to state 85
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 17 (sExpr)


State 130

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   18      | sExpr '+' sExpr .
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '%'    shift, and go to state 86
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 18 (sExpr)


State 131

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   19      | sExpr '%' sExpr .
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 80
    "div"  shift, and go to state 81
    '/'    shift, and go to state 87
    '*'    shift, and go to state 88

    $default  reduce using rule 19 (sExpr)


State 132

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   22      | sExpr '/' sExpr .
   23      | sExpr . '*' sExpr

    '*'  shift, and go to state 88

    $default  reduce using rule 22 (sExpr)


State 133

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   23      | sExpr '*' sExpr .

    $default  reduce using rule 23 (sExpr)


State 134

   79 exprStmt: symbol "+=" expr .

    $default  reduce using rule 79 (exprStmt)


State 135

   80 exprStmt: symbol "*=" expr .

    $default  reduce using rule 80 (exprStmt)


State 136

   78 exprStmt: symbol '=' expr .

    $default  reduce using rule 78 (exprStmt)


State 137

   46 primarySuffix: '(' ')' .

    $default  reduce using rule 46 (primarySuffix)


State 138

   45 primarySuffix: '(' exprList . ')'

    ')'  shift, and go to state 164


State 139

   68 arrayDeref: '[' expr . ']'

    ']'  shift, and go to state 165


State 140

   47 primarySuffix: '.' symbol .

    $default  reduce using rule 47 (primarySuffix)


State 141

   67 arrayDeref: arrayDeref '[' . expr ']'

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 166
    primary         go to state 35


State 142

   72 primary2: primary2 primarySuffix .

    $default  reduce using rule 72 (primary2)


State 143

   64 forStmt: "for" $@1 symbol $@2 . "in" expr ".." expr colonBody

    "in"  shift, and go to state 167


State 144

   49 condExpr: expr colon . expr elifCondExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 168
    primary         go to state 35


State 145

   96 colonBody: colon $@3 . stmt

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    INDG        shift, and go to state 169
    "break"     shift, and go to state 7
    "continue"  shift, and go to state 8
    "nil"       shift, and go to state 11
    "return"    shift, and go to state 13
    "not"       shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '$'         shift, and go to state 23
    '('         shift, and go to state 24
    '['         shift, and go to state 25

    sExpr           go to state 28
    symbol          go to state 29
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35
    exprStmt        go to state 36
    returnStmt      go to state 37
    breakStmt       go to state 38
    continueStmt    go to state 39
    simpleStmt      go to state 170
    stmt            go to state 171


State 146

   85 ifStmt: "if" expr colonBody INDEQ . elifCondStmt
   86       | "if" expr colonBody INDEQ . elifCondStmt "else" colonBody
   88       | "if" expr colonBody INDEQ . "else" colonBody

    INDEQ   shift, and go to state 172
    "else"  shift, and go to state 173

    elifCondStmt  go to state 174


State 147

   53 inlTupleDecl: "tuple" . '[' declColonCommaNoHang ']'

    '['  shift, and go to state 175


State 148

   54 arrayDecl: "array" . '[' INTLIT comma typeDesc ']'

    '['  shift, and go to state 176


State 149

   74 typeDesc: symbol .

    $default  reduce using rule 74 (typeDesc)


State 150

   75 typeDesc: inlTupleDecl .

    $default  reduce using rule 75 (typeDesc)


State 151

   76 typeDesc: arrayDecl .

    $default  reduce using rule 76 (typeDesc)


State 152

   60 paramListColon: ':' typeDesc .

    $default  reduce using rule 60 (paramListColon)


State 153

   56 paramList: '(' ')' .

    $default  reduce using rule 56 (paramList)


State 154

   52 declColon: symbol . ':' typeDesc

    ':'  shift, and go to state 177


State 155

   57 declColonCommaNoHang: declColon . comma declColonCommaNoHang
   58                     | declColon .

    ','  shift, and go to state 114

    $default  reduce using rule 58 (declColonCommaNoHang)

    comma  go to state 178


State 156

   55 paramList: '(' declColonCommaNoHang . ')'

    ')'  shift, and go to state 179


State 157

   59 paramListColon: paramList ':' . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 147
    "array"  shift, and go to state 148

    symbol        go to state 149
    inlTupleDecl  go to state 150
    arrayDecl     go to state 151
    typeDesc      go to state 180


State 158

   92 routine: symbol paramListColon '=' . stmt

    INTLIT      shift, and go to state 1
    FLOATLIT    shift, and go to state 2
    STRLIT      shift, and go to state 3
    CHARLIT     shift, and go to state 4
    BOOLLIT     shift, and go to state 5
    IDENT       shift, and go to state 6
    INDG        shift, and go to state 169
    "break"     shift, and go to state 7
    "continue"  shift, and go to state 8
    "nil"       shift, and go to state 11
    "return"    shift, and go to state 13
    "not"       shift, and go to state 20
    '-'         shift, and go to state 21
    '+'         shift, and go to state 22
    '$'         shift, and go to state 23
    '('         shift, and go to state 24
    '['         shift, and go to state 25

    sExpr           go to state 28
    symbol          go to state 29
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    primary         go to state 35
    exprStmt        go to state 36
    returnStmt      go to state 37
    breakStmt       go to state 38
    continueStmt    go to state 39
    simpleStmt      go to state 170
    stmt            go to state 181


State 159

   94 typeDef: symbol '=' typeDesc .

    $default  reduce using rule 94 (typeDef)


State 160

  101 serVariable: INDEQ . variable serVariable

    IDENT  shift, and go to state 6

    symbol    go to state 56
    variable  go to state 182


State 161

  100 secVariable: INDG variable serVariable . DED

    DED  shift, and go to state 183


State 162

   97 variable: symbol ':' typeDesc . '=' expr
   98         | symbol ':' typeDesc .

    '='  shift, and go to state 184

    $default  reduce using rule 98 (variable)


State 163

   31 exprList: expr comma exprList .

    $default  reduce using rule 31 (exprList)


State 164

   45 primarySuffix: '(' exprList ')' .

    $default  reduce using rule 45 (primarySuffix)


State 165

   68 arrayDeref: '[' expr ']' .

    $default  reduce using rule 68 (arrayDeref)


State 166

   67 arrayDeref: arrayDeref '[' expr . ']'

    ']'  shift, and go to state 185


State 167

   64 forStmt: "for" $@1 symbol $@2 "in" . expr ".." expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 186
    primary         go to state 35


State 168

   49 condExpr: expr colon expr . elifCondExpr

    "elif"  shift, and go to state 187
    "else"  shift, and go to state 188

    elifCondExpr  go to state 189


State 169

  118 stmt: INDG . stmt2 complexOrSimpleStmt DED

    $default  reduce using rule 120 (stmt2)

    stmt2  go to state 190


State 170

  117 stmt: simpleStmt .

    $default  reduce using rule 117 (stmt)


State 171

   96 colonBody: colon $@3 stmt .

    $default  reduce using rule 96 (colonBody)


State 172

   90 elifCondStmt: INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 191


State 173

   88 ifStmt: "if" expr colonBody INDEQ "else" . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 192


State 174

   85 ifStmt: "if" expr colonBody INDEQ elifCondStmt .
   86       | "if" expr colonBody INDEQ elifCondStmt . "else" colonBody
   89 elifCondStmt: elifCondStmt . INDEQ "elif" expr colonBody

    INDEQ   shift, and go to state 193
    "else"  shift, and go to state 194

    $default  reduce using rule 85 (ifStmt)


State 175

   53 inlTupleDecl: "tuple" '[' . declColonCommaNoHang ']'

    IDENT  shift, and go to state 6

    symbol                go to state 154
    declColon             go to state 155
    declColonCommaNoHang  go to state 195


State 176

   54 arrayDecl: "array" '[' . INTLIT comma typeDesc ']'

    INTLIT  shift, and go to state 196


State 177

   52 declColon: symbol ':' . typeDesc

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 147
    "array"  shift, and go to state 148

    symbol        go to state 149
    inlTupleDecl  go to state 150
    arrayDecl     go to state 151
    typeDesc      go to state 197


State 178

   57 declColonCommaNoHang: declColon comma . declColonCommaNoHang

    IDENT  shift, and go to state 6

    symbol                go to state 154
    declColon             go to state 155
    declColonCommaNoHang  go to state 198


State 179

   55 paramList: '(' declColonCommaNoHang ')' .

    $default  reduce using rule 55 (paramList)


State 180

   59 paramListColon: paramList ':' typeDesc .

    $default  reduce using rule 59 (paramListColon)


State 181

   92 routine: symbol paramListColon '=' stmt .

    $default  reduce using rule 92 (routine)


State 182

  101 serVariable: INDEQ variable . serVariable

    INDEQ  shift, and go to state 160

    $default  reduce using rule 102 (serVariable)

    serVariable  go to state 199


State 183

  100 secVariable: INDG variable serVariable DED .

    $default  reduce using rule 100 (secVariable)


State 184

   97 variable: symbol ':' typeDesc '=' . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 200
    primary         go to state 35


State 185

   67 arrayDeref: arrayDeref '[' expr ']' .

    $default  reduce using rule 67 (arrayDeref)


State 186

   64 forStmt: "for" $@1 symbol $@2 "in" expr . ".." expr colonBody

    ".."  shift, and go to state 201


State 187

   50 elifCondExpr: "elif" . expr colon expr elifCondExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 202
    primary         go to state 35


State 188

   51 elifCondExpr: "else" . colon expr

    ':'  shift, and go to state 101

    colon  go to state 203


State 189

   49 condExpr: expr colon expr elifCondExpr .

    $default  reduce using rule 49 (condExpr)


State 190

  118 stmt: INDG stmt2 . complexOrSimpleStmt DED
  119 stmt2: stmt2 . complexOrSimpleStmt INDEQ

    INTLIT       shift, and go to state 1
    FLOATLIT     shift, and go to state 2
    STRLIT       shift, and go to state 3
    CHARLIT      shift, and go to state 4
    BOOLLIT      shift, and go to state 5
    IDENT        shift, and go to state 6
    "break"      shift, and go to state 7
    "continue"   shift, and go to state 8
    "for"        shift, and go to state 9
    "if"         shift, and go to state 10
    "nil"        shift, and go to state 11
    "proc"       shift, and go to state 12
    "return"     shift, and go to state 13
    "type"       shift, and go to state 14
    "var"        shift, and go to state 15
    "while"      shift, and go to state 16
    "echo"       shift, and go to state 17
    "readInt"    shift, and go to state 18
    "readFloat"  shift, and go to state 19
    "not"        shift, and go to state 20
    '-'          shift, and go to state 21
    '+'          shift, and go to state 22
    '$'          shift, and go to state 23
    '('          shift, and go to state 24
    '['          shift, and go to state 25

    sExpr                go to state 28
    symbol               go to state 29
    literal              go to state 30
    identOrLiteral       go to state 31
    tupleConstr          go to state 32
    arrayConstr          go to state 33
    forStmt              go to state 34
    primary              go to state 35
    exprStmt             go to state 36
    returnStmt           go to state 37
    breakStmt            go to state 38
    continueStmt         go to state 39
    ifStmt               go to state 40
    whileStmt            go to state 41
    simpleStmt           go to state 42
    complexOrSimpleStmt  go to state 204


State 191

   90 elifCondStmt: INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 205
    primary         go to state 35


State 192

   88 ifStmt: "if" expr colonBody INDEQ "else" colonBody .

    $default  reduce using rule 88 (ifStmt)


State 193

   89 elifCondStmt: elifCondStmt INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 206


State 194

   86 ifStmt: "if" expr colonBody INDEQ elifCondStmt "else" . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 207


State 195

   53 inlTupleDecl: "tuple" '[' declColonCommaNoHang . ']'

    ']'  shift, and go to state 208


State 196

   54 arrayDecl: "array" '[' INTLIT . comma typeDesc ']'

    ','  shift, and go to state 114

    comma  go to state 209


State 197

   52 declColon: symbol ':' typeDesc .

    $default  reduce using rule 52 (declColon)


State 198

   57 declColonCommaNoHang: declColon comma declColonCommaNoHang .

    $default  reduce using rule 57 (declColonCommaNoHang)


State 199

  101 serVariable: INDEQ variable serVariable .

    $default  reduce using rule 101 (serVariable)


State 200

   97 variable: symbol ':' typeDesc '=' expr .

    $default  reduce using rule 97 (variable)


State 201

   64 forStmt: "for" $@1 symbol $@2 "in" expr ".." . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 210
    primary         go to state 35


State 202

   50 elifCondExpr: "elif" expr . colon expr elifCondExpr

    ':'  shift, and go to state 101

    colon  go to state 211


State 203

   51 elifCondExpr: "else" colon . expr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 212
    primary         go to state 35


State 204

  118 stmt: INDG stmt2 complexOrSimpleStmt . DED
  119 stmt2: stmt2 complexOrSimpleStmt . INDEQ

    INDEQ  shift, and go to state 213
    DED    shift, and go to state 214


State 205

   90 elifCondStmt: INDEQ "elif" expr . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 215


State 206

   89 elifCondStmt: elifCondStmt INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 216
    primary         go to state 35


State 207

   86 ifStmt: "if" expr colonBody INDEQ elifCondStmt "else" colonBody .

    $default  reduce using rule 86 (ifStmt)


State 208

   53 inlTupleDecl: "tuple" '[' declColonCommaNoHang ']' .

    $default  reduce using rule 53 (inlTupleDecl)


State 209

   54 arrayDecl: "array" '[' INTLIT comma . typeDesc ']'

    IDENT    shift, and go to state 6
    "tuple"  shift, and go to state 147
    "array"  shift, and go to state 148

    symbol        go to state 149
    inlTupleDecl  go to state 150
    arrayDecl     go to state 151
    typeDesc      go to state 217


State 210

   64 forStmt: "for" $@1 symbol $@2 "in" expr ".." expr . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 218


State 211

   50 elifCondExpr: "elif" expr colon . expr elifCondExpr

    INTLIT    shift, and go to state 1
    FLOATLIT  shift, and go to state 2
    STRLIT    shift, and go to state 3
    CHARLIT   shift, and go to state 4
    BOOLLIT   shift, and go to state 5
    IDENT     shift, and go to state 6
    "if"      shift, and go to state 45
    "nil"     shift, and go to state 11
    "not"     shift, and go to state 20
    '-'       shift, and go to state 21
    '+'       shift, and go to state 22
    '$'       shift, and go to state 23
    '('       shift, and go to state 24
    '['       shift, and go to state 25

    sExpr           go to state 46
    symbol          go to state 47
    literal         go to state 30
    identOrLiteral  go to state 31
    tupleConstr     go to state 32
    arrayConstr     go to state 33
    ifExpr          go to state 48
    expr            go to state 219
    primary         go to state 35


State 212

   51 elifCondExpr: "else" colon expr .

    $default  reduce using rule 51 (elifCondExpr)


State 213

  119 stmt2: stmt2 complexOrSimpleStmt INDEQ .

    $default  reduce using rule 119 (stmt2)


State 214

  118 stmt: INDG stmt2 complexOrSimpleStmt DED .

    $default  reduce using rule 118 (stmt)


State 215

   90 elifCondStmt: INDEQ "elif" expr colonBody .

    $default  reduce using rule 90 (elifCondStmt)


State 216

   89 elifCondStmt: elifCondStmt INDEQ "elif" expr . colonBody

    ':'  shift, and go to state 101

    colon      go to state 102
    colonBody  go to state 220


State 217

   54 arrayDecl: "array" '[' INTLIT comma typeDesc . ']'

    ']'  shift, and go to state 221


State 218

   64 forStmt: "for" $@1 symbol $@2 "in" expr ".." expr colonBody .

    $default  reduce using rule 64 (forStmt)


State 219

   50 elifCondExpr: "elif" expr colon expr . elifCondExpr

    "elif"  shift, and go to state 187
    "else"  shift, and go to state 188

    elifCondExpr  go to state 222


State 220

   89 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody .

    $default  reduce using rule 89 (elifCondStmt)


State 221

   54 arrayDecl: "array" '[' INTLIT comma typeDesc ']' .

    $default  reduce using rule 54 (arrayDecl)


State 222

   50 elifCondExpr: "elif" expr colon expr elifCondExpr .

    $default  reduce using rule 50 (elifCondExpr)
