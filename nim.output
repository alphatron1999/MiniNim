Terminals unused in grammar

   "proc"
   "return"
   "tuple"
   "type"
   ELSEX


Grammar

    0 $accept: module $end

    1 module: complexOrSimpleStmt
    2       | module2 INDEQ complexOrSimpleStmt
    3       | %empty

    4 module2: module2 INDEQ complexOrSimpleStmt
    5        | complexOrSimpleStmt

    6 comma: ','

    7 colon: ':'

    8 sExpr: sExpr "xor" sExpr
    9      | sExpr "or" sExpr
   10      | sExpr "and" sExpr
   11      | sExpr "!=" sExpr
   12      | sExpr '>' sExpr
   13      | sExpr ">=" sExpr
   14      | sExpr '<' sExpr
   15      | sExpr "<=" sExpr
   16      | sExpr "==" sExpr
   17      | sExpr '-' sExpr
   18      | sExpr '+' sExpr
   19      | sExpr '%' sExpr
   20      | sExpr "mod" sExpr
   21      | sExpr "div" sExpr
   22      | sExpr '/' sExpr
   23      | sExpr '*' sExpr
   24      | '+' sExpr
   25      | '-' sExpr
   26      | '$' sExpr
   27      | "not" sExpr
   28      | '(' sExpr ')'
   29      | primary

   30 symbol: IDENT

   31 literal: BOOLLIT
   32        | INTLIT
   33        | FLOATLIT
   34        | STRLIT
   35        | CHARLIT
   36        | "nil"

   37 identOrLiteral: symbol
   38               | literal

   39 arrayDecl: "array" '[' INTLIT comma typeDesc ']'

   40 $@1: %empty

   41 forStmt: "for" symbol "in" expr ".." expr $@1 colonBody

   42 expr: sExpr

   43 arrayDeref: arrayDeref '[' expr ']'
   44           | '[' expr ']'

   45 primary: identOrLiteral
   46        | identOrLiteral arrayDeref

   47 typeDesc: symbol
   48         | arrayDecl

   49 exprStmt: symbol '=' expr
   50         | symbol arrayDeref '=' expr
   51         | symbol "+=" expr
   52         | symbol "*=" expr

   53 breakStmt: "break"

   54 continueStmt: "continue"

   55 ifStmt: "if" expr colonBody INDEQ elifCondStmt
   56       | "if" expr colonBody INDEQ elifCondStmt "else" colonBody
   57       | "if" expr colonBody
   58       | "if" expr colonBody INDEQ "else" colonBody

   59 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody
   60             | INDEQ "elif" expr colonBody

   61 whileStmt: "while" expr colonBody

   62 $@2: %empty

   63 colonBody: colon $@2 stmt

   64 variable: symbol ':' typeDesc '=' expr
   65         | symbol ':' typeDesc

   66 secVariable: variable
   67            | INDG variable serVariable DED

   68 serVariable: serVariable INDEQ variable
   69            | %empty

   70 simpleStmt: breakStmt
   71           | continueStmt
   72           | exprStmt

   73 complexOrSimpleStmt: ifStmt
   74                    | whileStmt
   75                    | forStmt
   76                    | "echo" expr
   77                    | "var" secVariable
   78                    | "readInt" symbol
   79                    | "readInt" symbol arrayDeref
   80                    | "readFloat" symbol
   81                    | "readFloat" symbol arrayDeref
   82                    | simpleStmt

   83 stmt: simpleStmt
   84     | INDG stmt2 complexOrSimpleStmt DED

   85 stmt2: stmt2 complexOrSimpleStmt INDEQ
   86      | %empty


Terminals, with rules where they appear

$end (0) 0
'$' (36) 26
'%' (37) 19
'(' (40) 28
')' (41) 28
'*' (42) 23
'+' (43) 18 24
',' (44) 6
'-' (45) 17 25
'/' (47) 22
':' (58) 7 64 65
'<' (60) 14
'=' (61) 49 50 64
'>' (62) 12
'[' (91) 39 43 44
']' (93) 39 43 44
error (256)
INTLIT (258) 32 39
FLOATLIT (259) 33
STRLIT (260) 34
CHARLIT (261) 35
BOOLLIT (262) 31
IDENT (263) 30
INDG (264) 67 84
INDEQ (265) 2 4 55 56 58 59 60 68 85
DED (266) 67 84
"break" (267) 53
"continue" (268) 54
"elif" (269) 59 60
"else" (270) 56 58
"for" (271) 41
"if" (272) 55 56 57 58
"in" (273) 41
"nil" (274) 36
"proc" (275)
"return" (276)
"tuple" (277)
"type" (278)
"var" (279) 77
"while" (280) 61
"echo" (281) 76
"array" (282) 39
"readInt" (283) 78 79
"readFloat" (284) 80 81
IFX (285)
ELSEX (286)
"xor" (287) 8
"or" (288) 9
"and" (289) 10
"!=" (290) 11
">=" (291) 13
"<=" (292) 15
"==" (293) 16
".." (294) 41
"mod" (295) 20
"div" (296) 21
"not" (297) 27
"+=" (298) 51
"*=" (299) 52
UPLUS (300)
UMINUS (301)
LPAREN (302)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
module (64)
    on left: 1 2 3, on right: 0
module2 (65)
    on left: 4 5, on right: 2 4
comma (66)
    on left: 6, on right: 39
colon (67)
    on left: 7, on right: 63
sExpr (68)
    on left: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26
    27 28 29, on right: 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22
    23 24 25 26 27 28 42
symbol (69)
    on left: 30, on right: 37 41 47 49 50 51 52 64 65 78 79 80 81
literal (70)
    on left: 31 32 33 34 35 36, on right: 38
identOrLiteral (71)
    on left: 37 38, on right: 45 46
arrayDecl (72)
    on left: 39, on right: 48
forStmt (73)
    on left: 41, on right: 75
$@1 (74)
    on left: 40, on right: 41
expr (75)
    on left: 42, on right: 41 43 44 49 50 51 52 55 56 57 58 59 60 61
    64 76
arrayDeref (76)
    on left: 43 44, on right: 43 46 50 79 81
primary (77)
    on left: 45 46, on right: 29
typeDesc (78)
    on left: 47 48, on right: 39 64 65
exprStmt (79)
    on left: 49 50 51 52, on right: 72
breakStmt (80)
    on left: 53, on right: 70
continueStmt (81)
    on left: 54, on right: 71
ifStmt (82)
    on left: 55 56 57 58, on right: 73
elifCondStmt (83)
    on left: 59 60, on right: 55 56 59
whileStmt (84)
    on left: 61, on right: 74
colonBody (85)
    on left: 63, on right: 41 55 56 57 58 59 60 61
$@2 (86)
    on left: 62, on right: 63
variable (87)
    on left: 64 65, on right: 66 67 68
secVariable (88)
    on left: 66 67, on right: 77
serVariable (89)
    on left: 68 69, on right: 67 68
simpleStmt (90)
    on left: 70 71 72, on right: 82 83
complexOrSimpleStmt (91)
    on left: 73 74 75 76 77 78 79 80 81 82, on right: 1 2 4 5 84 85
stmt (92)
    on left: 83 84, on right: 63
stmt2 (93)
    on left: 85 86, on right: 84 85


State 0

    0 $accept: . module $end

    IDENT        shift, and go to state 1
    "break"      shift, and go to state 2
    "continue"   shift, and go to state 3
    "for"        shift, and go to state 4
    "if"         shift, and go to state 5
    "var"        shift, and go to state 6
    "while"      shift, and go to state 7
    "echo"       shift, and go to state 8
    "readInt"    shift, and go to state 9
    "readFloat"  shift, and go to state 10

    $default  reduce using rule 3 (module)

    module               go to state 11
    module2              go to state 12
    symbol               go to state 13
    forStmt              go to state 14
    exprStmt             go to state 15
    breakStmt            go to state 16
    continueStmt         go to state 17
    ifStmt               go to state 18
    whileStmt            go to state 19
    simpleStmt           go to state 20
    complexOrSimpleStmt  go to state 21


State 1

   30 symbol: IDENT .

    $default  reduce using rule 30 (symbol)


State 2

   53 breakStmt: "break" .

    $default  reduce using rule 53 (breakStmt)


State 3

   54 continueStmt: "continue" .

    $default  reduce using rule 54 (continueStmt)


State 4

   41 forStmt: "for" . symbol "in" expr ".." expr $@1 colonBody

    IDENT  shift, and go to state 1

    symbol  go to state 22


State 5

   55 ifStmt: "if" . expr colonBody INDEQ elifCondStmt
   56       | "if" . expr colonBody INDEQ elifCondStmt "else" colonBody
   57       | "if" . expr colonBody
   58       | "if" . expr colonBody INDEQ "else" colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 38
    primary         go to state 39


State 6

   77 complexOrSimpleStmt: "var" . secVariable

    IDENT  shift, and go to state 1
    INDG   shift, and go to state 40

    symbol       go to state 41
    variable     go to state 42
    secVariable  go to state 43


State 7

   61 whileStmt: "while" . expr colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 44
    primary         go to state 39


State 8

   76 complexOrSimpleStmt: "echo" . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 45
    primary         go to state 39


State 9

   78 complexOrSimpleStmt: "readInt" . symbol
   79                    | "readInt" . symbol arrayDeref

    IDENT  shift, and go to state 1

    symbol  go to state 46


State 10

   80 complexOrSimpleStmt: "readFloat" . symbol
   81                    | "readFloat" . symbol arrayDeref

    IDENT  shift, and go to state 1

    symbol  go to state 47


State 11

    0 $accept: module . $end

    $end  shift, and go to state 48


State 12

    2 module: module2 . INDEQ complexOrSimpleStmt
    4 module2: module2 . INDEQ complexOrSimpleStmt

    INDEQ  shift, and go to state 49


State 13

   49 exprStmt: symbol . '=' expr
   50         | symbol . arrayDeref '=' expr
   51         | symbol . "+=" expr
   52         | symbol . "*=" expr

    "+="  shift, and go to state 50
    "*="  shift, and go to state 51
    '['   shift, and go to state 52
    '='   shift, and go to state 53

    arrayDeref  go to state 54


State 14

   75 complexOrSimpleStmt: forStmt .

    $default  reduce using rule 75 (complexOrSimpleStmt)


State 15

   72 simpleStmt: exprStmt .

    $default  reduce using rule 72 (simpleStmt)


State 16

   70 simpleStmt: breakStmt .

    $default  reduce using rule 70 (simpleStmt)


State 17

   71 simpleStmt: continueStmt .

    $default  reduce using rule 71 (simpleStmt)


State 18

   73 complexOrSimpleStmt: ifStmt .

    $default  reduce using rule 73 (complexOrSimpleStmt)


State 19

   74 complexOrSimpleStmt: whileStmt .

    $default  reduce using rule 74 (complexOrSimpleStmt)


State 20

   82 complexOrSimpleStmt: simpleStmt .

    $default  reduce using rule 82 (complexOrSimpleStmt)


State 21

    1 module: complexOrSimpleStmt .
    5 module2: complexOrSimpleStmt .

    INDEQ     reduce using rule 5 (module2)
    $default  reduce using rule 1 (module)


State 22

   41 forStmt: "for" symbol . "in" expr ".." expr $@1 colonBody

    "in"  shift, and go to state 55


State 23

   32 literal: INTLIT .

    $default  reduce using rule 32 (literal)


State 24

   33 literal: FLOATLIT .

    $default  reduce using rule 33 (literal)


State 25

   34 literal: STRLIT .

    $default  reduce using rule 34 (literal)


State 26

   35 literal: CHARLIT .

    $default  reduce using rule 35 (literal)


State 27

   31 literal: BOOLLIT .

    $default  reduce using rule 31 (literal)


State 28

   36 literal: "nil" .

    $default  reduce using rule 36 (literal)


State 29

   27 sExpr: "not" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 56
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 30

   25 sExpr: '-' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 57
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 31

   24 sExpr: '+' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 58
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 32

   26 sExpr: '$' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 59
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 33

   28 sExpr: '(' . sExpr ')'

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 60
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 34

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   42 expr: sExpr .

    "xor"  shift, and go to state 61
    "or"   shift, and go to state 62
    "and"  shift, and go to state 63
    "!="   shift, and go to state 64
    ">="   shift, and go to state 65
    "<="   shift, and go to state 66
    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '>'    shift, and go to state 70
    '<'    shift, and go to state 71
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 42 (expr)


State 35

   37 identOrLiteral: symbol .

    $default  reduce using rule 37 (identOrLiteral)


State 36

   38 identOrLiteral: literal .

    $default  reduce using rule 38 (identOrLiteral)


State 37

   45 primary: identOrLiteral .
   46        | identOrLiteral . arrayDeref

    '['  shift, and go to state 52

    $default  reduce using rule 45 (primary)

    arrayDeref  go to state 77


State 38

   55 ifStmt: "if" expr . colonBody INDEQ elifCondStmt
   56       | "if" expr . colonBody INDEQ elifCondStmt "else" colonBody
   57       | "if" expr . colonBody
   58       | "if" expr . colonBody INDEQ "else" colonBody

    ':'  shift, and go to state 78

    colon      go to state 79
    colonBody  go to state 80


State 39

   29 sExpr: primary .

    $default  reduce using rule 29 (sExpr)


State 40

   67 secVariable: INDG . variable serVariable DED

    IDENT  shift, and go to state 1

    symbol    go to state 41
    variable  go to state 81


State 41

   64 variable: symbol . ':' typeDesc '=' expr
   65         | symbol . ':' typeDesc

    ':'  shift, and go to state 82


State 42

   66 secVariable: variable .

    $default  reduce using rule 66 (secVariable)


State 43

   77 complexOrSimpleStmt: "var" secVariable .

    $default  reduce using rule 77 (complexOrSimpleStmt)


State 44

   61 whileStmt: "while" expr . colonBody

    ':'  shift, and go to state 78

    colon      go to state 79
    colonBody  go to state 83


State 45

   76 complexOrSimpleStmt: "echo" expr .

    $default  reduce using rule 76 (complexOrSimpleStmt)


State 46

   78 complexOrSimpleStmt: "readInt" symbol .
   79                    | "readInt" symbol . arrayDeref

    '['  shift, and go to state 52

    $default  reduce using rule 78 (complexOrSimpleStmt)

    arrayDeref  go to state 84


State 47

   80 complexOrSimpleStmt: "readFloat" symbol .
   81                    | "readFloat" symbol . arrayDeref

    '['  shift, and go to state 52

    $default  reduce using rule 80 (complexOrSimpleStmt)

    arrayDeref  go to state 85


State 48

    0 $accept: module $end .

    $default  accept


State 49

    2 module: module2 INDEQ . complexOrSimpleStmt
    4 module2: module2 INDEQ . complexOrSimpleStmt

    IDENT        shift, and go to state 1
    "break"      shift, and go to state 2
    "continue"   shift, and go to state 3
    "for"        shift, and go to state 4
    "if"         shift, and go to state 5
    "var"        shift, and go to state 6
    "while"      shift, and go to state 7
    "echo"       shift, and go to state 8
    "readInt"    shift, and go to state 9
    "readFloat"  shift, and go to state 10

    symbol               go to state 13
    forStmt              go to state 14
    exprStmt             go to state 15
    breakStmt            go to state 16
    continueStmt         go to state 17
    ifStmt               go to state 18
    whileStmt            go to state 19
    simpleStmt           go to state 20
    complexOrSimpleStmt  go to state 86


State 50

   51 exprStmt: symbol "+=" . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 87
    primary         go to state 39


State 51

   52 exprStmt: symbol "*=" . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 88
    primary         go to state 39


State 52

   44 arrayDeref: '[' . expr ']'

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 89
    primary         go to state 39


State 53

   49 exprStmt: symbol '=' . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 90
    primary         go to state 39


State 54

   43 arrayDeref: arrayDeref . '[' expr ']'
   50 exprStmt: symbol arrayDeref . '=' expr

    '['  shift, and go to state 91
    '='  shift, and go to state 92


State 55

   41 forStmt: "for" symbol "in" . expr ".." expr $@1 colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 93
    primary         go to state 39


State 56

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   27      | "not" sExpr .

    $default  reduce using rule 27 (sExpr)


State 57

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   25      | '-' sExpr .

    $default  reduce using rule 25 (sExpr)


State 58

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   24      | '+' sExpr .

    $default  reduce using rule 24 (sExpr)


State 59

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   26      | '$' sExpr .

    $default  reduce using rule 26 (sExpr)


State 60

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   28      | '(' sExpr . ')'

    "xor"  shift, and go to state 61
    "or"   shift, and go to state 62
    "and"  shift, and go to state 63
    "!="   shift, and go to state 64
    ">="   shift, and go to state 65
    "<="   shift, and go to state 66
    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '>'    shift, and go to state 70
    '<'    shift, and go to state 71
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76
    ')'    shift, and go to state 94


State 61

    8 sExpr: sExpr "xor" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 95
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 62

    9 sExpr: sExpr "or" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 96
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 63

   10 sExpr: sExpr "and" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 97
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 64

   11 sExpr: sExpr "!=" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 98
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 65

   13 sExpr: sExpr ">=" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 99
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 66

   15 sExpr: sExpr "<=" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 100
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 67

   16 sExpr: sExpr "==" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 101
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 68

   20 sExpr: sExpr "mod" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 102
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 69

   21 sExpr: sExpr "div" . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 103
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 70

   12 sExpr: sExpr '>' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 104
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 71

   14 sExpr: sExpr '<' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 105
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 72

   17 sExpr: sExpr '-' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 106
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 73

   18 sExpr: sExpr '+' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 107
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 74

   19 sExpr: sExpr '%' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 108
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 75

   22 sExpr: sExpr '/' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 109
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 76

   23 sExpr: sExpr '*' . sExpr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 110
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    primary         go to state 39


State 77

   43 arrayDeref: arrayDeref . '[' expr ']'
   46 primary: identOrLiteral arrayDeref .

    '['  shift, and go to state 91

    $default  reduce using rule 46 (primary)


State 78

    7 colon: ':' .

    $default  reduce using rule 7 (colon)


State 79

   63 colonBody: colon . $@2 stmt

    $default  reduce using rule 62 ($@2)

    $@2  go to state 111


State 80

   55 ifStmt: "if" expr colonBody . INDEQ elifCondStmt
   56       | "if" expr colonBody . INDEQ elifCondStmt "else" colonBody
   57       | "if" expr colonBody .
   58       | "if" expr colonBody . INDEQ "else" colonBody

    INDEQ  shift, and go to state 112

    $default  reduce using rule 57 (ifStmt)


State 81

   67 secVariable: INDG variable . serVariable DED

    $default  reduce using rule 69 (serVariable)

    serVariable  go to state 113


State 82

   64 variable: symbol ':' . typeDesc '=' expr
   65         | symbol ':' . typeDesc

    IDENT    shift, and go to state 1
    "array"  shift, and go to state 114

    symbol     go to state 115
    arrayDecl  go to state 116
    typeDesc   go to state 117


State 83

   61 whileStmt: "while" expr colonBody .

    $default  reduce using rule 61 (whileStmt)


State 84

   43 arrayDeref: arrayDeref . '[' expr ']'
   79 complexOrSimpleStmt: "readInt" symbol arrayDeref .

    '['  shift, and go to state 91

    $default  reduce using rule 79 (complexOrSimpleStmt)


State 85

   43 arrayDeref: arrayDeref . '[' expr ']'
   81 complexOrSimpleStmt: "readFloat" symbol arrayDeref .

    '['  shift, and go to state 91

    $default  reduce using rule 81 (complexOrSimpleStmt)


State 86

    2 module: module2 INDEQ complexOrSimpleStmt .
    4 module2: module2 INDEQ complexOrSimpleStmt .

    INDEQ     reduce using rule 4 (module2)
    $default  reduce using rule 2 (module)


State 87

   51 exprStmt: symbol "+=" expr .

    $default  reduce using rule 51 (exprStmt)


State 88

   52 exprStmt: symbol "*=" expr .

    $default  reduce using rule 52 (exprStmt)


State 89

   44 arrayDeref: '[' expr . ']'

    ']'  shift, and go to state 118


State 90

   49 exprStmt: symbol '=' expr .

    $default  reduce using rule 49 (exprStmt)


State 91

   43 arrayDeref: arrayDeref '[' . expr ']'

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 119
    primary         go to state 39


State 92

   50 exprStmt: symbol arrayDeref '=' . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 120
    primary         go to state 39


State 93

   41 forStmt: "for" symbol "in" expr . ".." expr $@1 colonBody

    ".."  shift, and go to state 121


State 94

   28 sExpr: '(' sExpr ')' .

    $default  reduce using rule 28 (sExpr)


State 95

    8 sExpr: sExpr . "xor" sExpr
    8      | sExpr "xor" sExpr .
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "or"   shift, and go to state 62
    "and"  shift, and go to state 63
    "!="   shift, and go to state 64
    ">="   shift, and go to state 65
    "<="   shift, and go to state 66
    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '>'    shift, and go to state 70
    '<'    shift, and go to state 71
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 8 (sExpr)


State 96

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
    9      | sExpr "or" sExpr .
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "and"  shift, and go to state 63
    "!="   shift, and go to state 64
    ">="   shift, and go to state 65
    "<="   shift, and go to state 66
    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '>'    shift, and go to state 70
    '<'    shift, and go to state 71
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 9 (sExpr)


State 97

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   10      | sExpr "and" sExpr .
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "!="   shift, and go to state 64
    ">="   shift, and go to state 65
    "<="   shift, and go to state 66
    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '>'    shift, and go to state 70
    '<'    shift, and go to state 71
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 10 (sExpr)


State 98

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   11      | sExpr "!=" sExpr .
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    ">="   shift, and go to state 65
    "<="   shift, and go to state 66
    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '>'    shift, and go to state 70
    '<'    shift, and go to state 71
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 11 (sExpr)


State 99

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   13      | sExpr ">=" sExpr .
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "<="   shift, and go to state 66
    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '<'    shift, and go to state 71
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 13 (sExpr)


State 100

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   15      | sExpr "<=" sExpr .
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 15 (sExpr)


State 101

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   16      | sExpr "==" sExpr .
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 16 (sExpr)


State 102

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   20      | sExpr "mod" sExpr .
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "div"  shift, and go to state 69
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 20 (sExpr)


State 103

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   21      | sExpr "div" sExpr .
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    '/'  shift, and go to state 75
    '*'  shift, and go to state 76

    $default  reduce using rule 21 (sExpr)


State 104

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   12      | sExpr '>' sExpr .
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    ">="   shift, and go to state 65
    "<="   shift, and go to state 66
    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '<'    shift, and go to state 71
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 12 (sExpr)


State 105

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   14      | sExpr '<' sExpr .
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "<="   shift, and go to state 66
    "=="   shift, and go to state 67
    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '-'    shift, and go to state 72
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 14 (sExpr)


State 106

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   17      | sExpr '-' sExpr .
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '+'    shift, and go to state 73
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 17 (sExpr)


State 107

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   18      | sExpr '+' sExpr .
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '%'    shift, and go to state 74
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 18 (sExpr)


State 108

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   19      | sExpr '%' sExpr .
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr

    "mod"  shift, and go to state 68
    "div"  shift, and go to state 69
    '/'    shift, and go to state 75
    '*'    shift, and go to state 76

    $default  reduce using rule 19 (sExpr)


State 109

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   22      | sExpr '/' sExpr .
   23      | sExpr . '*' sExpr

    '*'  shift, and go to state 76

    $default  reduce using rule 22 (sExpr)


State 110

    8 sExpr: sExpr . "xor" sExpr
    9      | sExpr . "or" sExpr
   10      | sExpr . "and" sExpr
   11      | sExpr . "!=" sExpr
   12      | sExpr . '>' sExpr
   13      | sExpr . ">=" sExpr
   14      | sExpr . '<' sExpr
   15      | sExpr . "<=" sExpr
   16      | sExpr . "==" sExpr
   17      | sExpr . '-' sExpr
   18      | sExpr . '+' sExpr
   19      | sExpr . '%' sExpr
   20      | sExpr . "mod" sExpr
   21      | sExpr . "div" sExpr
   22      | sExpr . '/' sExpr
   23      | sExpr . '*' sExpr
   23      | sExpr '*' sExpr .

    $default  reduce using rule 23 (sExpr)


State 111

   63 colonBody: colon $@2 . stmt

    IDENT       shift, and go to state 1
    INDG        shift, and go to state 122
    "break"     shift, and go to state 2
    "continue"  shift, and go to state 3

    symbol        go to state 13
    exprStmt      go to state 15
    breakStmt     go to state 16
    continueStmt  go to state 17
    simpleStmt    go to state 123
    stmt          go to state 124


State 112

   55 ifStmt: "if" expr colonBody INDEQ . elifCondStmt
   56       | "if" expr colonBody INDEQ . elifCondStmt "else" colonBody
   58       | "if" expr colonBody INDEQ . "else" colonBody

    INDEQ   shift, and go to state 125
    "else"  shift, and go to state 126

    elifCondStmt  go to state 127


State 113

   67 secVariable: INDG variable serVariable . DED
   68 serVariable: serVariable . INDEQ variable

    INDEQ  shift, and go to state 128
    DED    shift, and go to state 129


State 114

   39 arrayDecl: "array" . '[' INTLIT comma typeDesc ']'

    '['  shift, and go to state 130


State 115

   47 typeDesc: symbol .

    $default  reduce using rule 47 (typeDesc)


State 116

   48 typeDesc: arrayDecl .

    $default  reduce using rule 48 (typeDesc)


State 117

   64 variable: symbol ':' typeDesc . '=' expr
   65         | symbol ':' typeDesc .

    '='  shift, and go to state 131

    $default  reduce using rule 65 (variable)


State 118

   44 arrayDeref: '[' expr ']' .

    $default  reduce using rule 44 (arrayDeref)


State 119

   43 arrayDeref: arrayDeref '[' expr . ']'

    ']'  shift, and go to state 132


State 120

   50 exprStmt: symbol arrayDeref '=' expr .

    $default  reduce using rule 50 (exprStmt)


State 121

   41 forStmt: "for" symbol "in" expr ".." . expr $@1 colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 133
    primary         go to state 39


State 122

   84 stmt: INDG . stmt2 complexOrSimpleStmt DED

    $default  reduce using rule 86 (stmt2)

    stmt2  go to state 134


State 123

   83 stmt: simpleStmt .

    $default  reduce using rule 83 (stmt)


State 124

   63 colonBody: colon $@2 stmt .

    $default  reduce using rule 63 (colonBody)


State 125

   60 elifCondStmt: INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 135


State 126

   58 ifStmt: "if" expr colonBody INDEQ "else" . colonBody

    ':'  shift, and go to state 78

    colon      go to state 79
    colonBody  go to state 136


State 127

   55 ifStmt: "if" expr colonBody INDEQ elifCondStmt .
   56       | "if" expr colonBody INDEQ elifCondStmt . "else" colonBody
   59 elifCondStmt: elifCondStmt . INDEQ "elif" expr colonBody

    INDEQ   shift, and go to state 137
    "else"  shift, and go to state 138

    $default  reduce using rule 55 (ifStmt)


State 128

   68 serVariable: serVariable INDEQ . variable

    IDENT  shift, and go to state 1

    symbol    go to state 41
    variable  go to state 139


State 129

   67 secVariable: INDG variable serVariable DED .

    $default  reduce using rule 67 (secVariable)


State 130

   39 arrayDecl: "array" '[' . INTLIT comma typeDesc ']'

    INTLIT  shift, and go to state 140


State 131

   64 variable: symbol ':' typeDesc '=' . expr

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 141
    primary         go to state 39


State 132

   43 arrayDeref: arrayDeref '[' expr ']' .

    $default  reduce using rule 43 (arrayDeref)


State 133

   41 forStmt: "for" symbol "in" expr ".." expr . $@1 colonBody

    $default  reduce using rule 40 ($@1)

    $@1  go to state 142


State 134

   84 stmt: INDG stmt2 . complexOrSimpleStmt DED
   85 stmt2: stmt2 . complexOrSimpleStmt INDEQ

    IDENT        shift, and go to state 1
    "break"      shift, and go to state 2
    "continue"   shift, and go to state 3
    "for"        shift, and go to state 4
    "if"         shift, and go to state 5
    "var"        shift, and go to state 6
    "while"      shift, and go to state 7
    "echo"       shift, and go to state 8
    "readInt"    shift, and go to state 9
    "readFloat"  shift, and go to state 10

    symbol               go to state 13
    forStmt              go to state 14
    exprStmt             go to state 15
    breakStmt            go to state 16
    continueStmt         go to state 17
    ifStmt               go to state 18
    whileStmt            go to state 19
    simpleStmt           go to state 20
    complexOrSimpleStmt  go to state 143


State 135

   60 elifCondStmt: INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 144
    primary         go to state 39


State 136

   58 ifStmt: "if" expr colonBody INDEQ "else" colonBody .

    $default  reduce using rule 58 (ifStmt)


State 137

   59 elifCondStmt: elifCondStmt INDEQ . "elif" expr colonBody

    "elif"  shift, and go to state 145


State 138

   56 ifStmt: "if" expr colonBody INDEQ elifCondStmt "else" . colonBody

    ':'  shift, and go to state 78

    colon      go to state 79
    colonBody  go to state 146


State 139

   68 serVariable: serVariable INDEQ variable .

    $default  reduce using rule 68 (serVariable)


State 140

   39 arrayDecl: "array" '[' INTLIT . comma typeDesc ']'

    ','  shift, and go to state 147

    comma  go to state 148


State 141

   64 variable: symbol ':' typeDesc '=' expr .

    $default  reduce using rule 64 (variable)


State 142

   41 forStmt: "for" symbol "in" expr ".." expr $@1 . colonBody

    ':'  shift, and go to state 78

    colon      go to state 79
    colonBody  go to state 149


State 143

   84 stmt: INDG stmt2 complexOrSimpleStmt . DED
   85 stmt2: stmt2 complexOrSimpleStmt . INDEQ

    INDEQ  shift, and go to state 150
    DED    shift, and go to state 151


State 144

   60 elifCondStmt: INDEQ "elif" expr . colonBody

    ':'  shift, and go to state 78

    colon      go to state 79
    colonBody  go to state 152


State 145

   59 elifCondStmt: elifCondStmt INDEQ "elif" . expr colonBody

    INTLIT    shift, and go to state 23
    FLOATLIT  shift, and go to state 24
    STRLIT    shift, and go to state 25
    CHARLIT   shift, and go to state 26
    BOOLLIT   shift, and go to state 27
    IDENT     shift, and go to state 1
    "nil"     shift, and go to state 28
    "not"     shift, and go to state 29
    '-'       shift, and go to state 30
    '+'       shift, and go to state 31
    '$'       shift, and go to state 32
    '('       shift, and go to state 33

    sExpr           go to state 34
    symbol          go to state 35
    literal         go to state 36
    identOrLiteral  go to state 37
    expr            go to state 153
    primary         go to state 39


State 146

   56 ifStmt: "if" expr colonBody INDEQ elifCondStmt "else" colonBody .

    $default  reduce using rule 56 (ifStmt)


State 147

    6 comma: ',' .

    $default  reduce using rule 6 (comma)


State 148

   39 arrayDecl: "array" '[' INTLIT comma . typeDesc ']'

    IDENT    shift, and go to state 1
    "array"  shift, and go to state 114

    symbol     go to state 115
    arrayDecl  go to state 116
    typeDesc   go to state 154


State 149

   41 forStmt: "for" symbol "in" expr ".." expr $@1 colonBody .

    $default  reduce using rule 41 (forStmt)


State 150

   85 stmt2: stmt2 complexOrSimpleStmt INDEQ .

    $default  reduce using rule 85 (stmt2)


State 151

   84 stmt: INDG stmt2 complexOrSimpleStmt DED .

    $default  reduce using rule 84 (stmt)


State 152

   60 elifCondStmt: INDEQ "elif" expr colonBody .

    $default  reduce using rule 60 (elifCondStmt)


State 153

   59 elifCondStmt: elifCondStmt INDEQ "elif" expr . colonBody

    ':'  shift, and go to state 78

    colon      go to state 79
    colonBody  go to state 155


State 154

   39 arrayDecl: "array" '[' INTLIT comma typeDesc . ']'

    ']'  shift, and go to state 156


State 155

   59 elifCondStmt: elifCondStmt INDEQ "elif" expr colonBody .

    $default  reduce using rule 59 (elifCondStmt)


State 156

   39 arrayDecl: "array" '[' INTLIT comma typeDesc ']' .

    $default  reduce using rule 39 (arrayDecl)
